{"text": " Pensieri in codice. Idee dal mondo del software a cura di Valerio Galano. Buongiorno a tutti ragazzi e ben ritrovati per un nuovo episodio di Pensieri in codice, il podcast in cui parliamo di argomenti presi dal mondo del software, di internet e della programmazione. Prima di partire subito con l'argomento di oggi una piccola comunicazione di servizio. Il 12 ottobre 2019 si terr\u00e0 a Milano il festival del podcasting e Pensieri in codice \u00e8 candidato come miglior podcast emergente. I primi dieci classificati verranno annunciati sul palco del festival, quindi se vi va di aiutarmi nel contest fermate un secondo il podcast e collegatevi al link vota.pensierincodice.it, lo trovate anche in descrizione. Si aprir\u00e0 un post Instagram e non dovrete fare altro che mettere un like. Vi ringrazio tutti per il supporto e ora procediamo con l'argomento del giorno. Come per l'episodio della settimana scorsa, anche oggi diamo il via ad una nuova rubrica che chiameremo Algoritmi e nella quale parleremo, indovinate un po', di algoritmi. Negli episodi di questa rubrica andremo ad esaminare quali sono le logiche alla base dei pi\u00f9 importanti algoritmi e proveremo a capire, almeno a grandi linee, come funzionano. Questo perch\u00e9 in generale siamo ben abituati a parlare dei progressi nel campo dell'hardware. Compriamo l'ultimo modello di smartphone che ha la fotocamera con pi\u00f9 megapixel, il pc con il doppio della memoria del suo predecessore e cos\u00ec via. Per\u00f2 non pensiamo mai al fatto che nelle azioni che compiamo tutti i giorni un buon algoritmo \u00e8 altrettanto, se non addirittura pi\u00f9 importante, dell'hardware che utilizziamo. Pensate a cosa avete fatto ieri con il vostro smartphone o con il vostro pc. Magari avete trovato il percorso pi\u00f9 breve per raggiungere la vostra destinazione o forse avete inviato il video del vostro cagnolino ad un parente distante molti chilometri o forse ancora avete individuato il documento che volevate leggere in un archivio di svariati miliardi di documenti. Tutto questo l'avete potuto fare grazie all'hardware di cui disponete, certo, ma anche grazie ad una serie di ingegnosi algoritmi che vi hanno permesso di trovare la distanza minore tra un insieme di punti o di comprimere e trasmettere file audio e video o ancora grazie ad algoritmi di indicizzazione dei motori di ricerca. Allo stesso modo sono tantissimi gli algoritmi che tutti i giorni, senza che nemmeno ce ne accorgiamo, ci semplificano continuamente la vita o in qualche caso ce la complicano, ma di questo parleremo in futuro. Per questo motivo io credo che sia importante conoscere, o almeno comprendere, come funzionano tutti i grandi algoritmi che nel corso della storia hanno contribuito a costruire il mondo cos\u00ec come noi oggi lo viviamo. Chiunque abbia gi\u00e0 un'infarinatura di programmazione o di informatica in generale conoscer\u00e0 gi\u00e0 la definizione formale di algoritmo e cio\u00e8 qualcosa del tipo un algoritmo \u00e8 un insieme finito di passi sufficientemente semplici che se eseguiti nell'ordine permettono di trasformare un dato input in un dato output. Tuttavia in questa rubrica vorrei mettere in luce il fatto che un algoritmo, per come la vedo io, non \u00e8 soltanto questo. Un algoritmo, secondo me, \u00e8 la rappresentazione di un'idea. Una descrizione precisa ed elegante di una soluzione ad un dato problema. Di conseguenza potremmo definire un grande algoritmo come la pi\u00f9 efficiente, la pi\u00f9 elegante e, in generale, la migliore delle soluzioni che al momento conosciamo per problemi reali che affrontiamo ogni giorno. Tra gli argomenti che potenzialmente potranno entrare a far parte di questa rubrica ci saranno dunque algoritmi di utilizzo quotidiano come quelli di criptografia, di trasmissione, di ricerca, di ordinamento, di verifica della consistenza, varie tipologie di machine learning e molto molto altro. Nell'episodio di oggi parleremo dell'algoritmo di compressione, una funzionalit\u00e0 che magari crediamo di utilizzare di tanto in tanto ma che, come vedremo fra poco, ci accompagna praticamente ogni giorno senza che nemmeno ce ne rendiamo conto. Tutti i file che memorizziamo nei nostri dispositivi, che scambiamo ogni giorno e che archiviamo nel cloud, hanno una caratteristica che prende il nome di dimensione o peso a seconda dei contesti e che si esprime in byte e in relativi multipli come ad esempio il kilobyte o il kibibyte e, se non avete mai sentito parlare di kibibyte, vi consiglio di ascoltare l'episodio numero 12 dal titolo La storia del kibibyte. Questa dimensione rappresenta lo spazio che il file occupa nella memoria di archiviazione. Maggiore sar\u00e0 la dimensione del file, minore sar\u00e0 il numero di file che riusciremo ad archiviare nella memoria dei nostri dispositivi. Dal momento per\u00f2 che con il passare del tempo le memorie sono progressivamente divenute sempre pi\u00f9 grandi e al tempo stesso sempre pi\u00f9 economiche, noi non sentiamo effettivamente il bisogno di comprimere i file per ridurne la dimensione cos\u00ec come accadeva di norma fino a qualche anno fa. Nonostante ci\u00f2 la compressione resta una parte fondamentale sia per la trasmissione che per l'archiviazione dei dati. Tutte le grandi piattaforme di streaming ad esempio utilizzano la compressione sui propri contenuti e questo diminuisce di gran lunga l'ampiezza di banda necessaria per noi per guardare un film o per ascoltare la musica. Lo stesso discorso vale per i servizi di sincronizzazione dei file come ad esempio Dropbox e simili, ma in pi\u00f9 essi utilizzano la compressione anche per conservare i nostri dati e quindi per risparmiare sulle quantit\u00e0 di memoria di archiviazione necessarie. Le compagnie telefoniche anche comprimono la voce durante le chiamate per poter sfruttare maggiormente le linee e si potrebbe andare avanti per molto perch\u00e9 gli esempi sono tantissimi. Ma come funziona in effetti questa operazione che prende il nome di compressione? Innanzitutto partiamo col chiarire che la compressione pu\u00f2 essere di due tipi quella senza perdita di informazione e quella con perdita di informazione. Per compressione senza perdita si intende quel tipo di compressione in cui il file compresso, se decompresso, ritorna a essere esattamente identico al file di partenza. Il formato pi\u00f9 famoso di questo tipo di compressione prende il nome di formato zip. Un file pu\u00f2 essere infatti zippato e dezippato pi\u00f9 volte senza che le informazioni al suo interno vengano in alcun modo alterate. L'algoritmo del formato zip basa il suo funzionamento sul fatto che i file vengono memorizzati sotto forma di stringhe di testo ed applica a queste stringhe la combinazione di due operazioni. Badate bene, nella realt\u00e0 l'algoritmo non lavora direttamente sul testo ma a basso livello sulla codifica del file. Noi per\u00f2 cerchiamo di semplificare perch\u00e9 ci\u00f2 che ci interessa \u00e8 il concetto alla base. Quindi prima di tutto dicevamo l'algoritmo individua le ripetizioni all'interno del testo. Se ad esempio trova la sequenza abc abc abc la sostituisce con la sequenza abc per 3 che sta a significare che la sequenza abc in origine era ripetuta tre volte. Come possiamo vedere con questo semplice espediente un testo di lunghezza 9 caratteri si \u00e8 gi\u00e0 ridotto a 5. Siamo quindi gi\u00e0 quasi ad una dimensione pari a met\u00e0 di quella del file originale anche se badate bene che \u00e8 un esempio e sto semplificando estremamente. Il secondo passo che l'algoritmo applica \u00e8 quello di cercare le ripetizioni sparse per il testo quindi non pi\u00f9 quelle consecutive come nell'esempio precedente e le sostituisce con una rappresentazione abbreviata. Quindi se ad esempio nel testo dovesse essere presente sette volte la parola carota l'algoritmo potrebbe sostituire tutte e sette le occorrenze con il numero 1. Se trovasse 5 volte la parola sedano la sostituirebbe magari con il numero 2 e zucca che compare due volte verrebbe sostituita con il numero 3 e cos\u00ec via. Nel fare queste sostituzioni l'algoritmo produrrebbe anche una piccola tabella per tenere conto dei collegamenti tra la parola originale e l'abbreviazione e la inserirebbe all'interno del file zip risultante. Il risultato dell'applicazione di questi due passaggi sul file ne rappresenta una compressione senza perdita. Ne produce infatti una versione molto pi\u00f9 piccola nella quale per\u00f2 sono contenute tutte le informazioni del file originale. Baster\u00e0 quindi applicare i passaggi precedentemente descritti in ordine inverso per ripristinare il file di partenza. Diversa invece \u00e8 la questione se si parla di algoritmi di compressione con perdita di informazione. In questo caso infatti la procedura prevede di produrre una versione compressa del file della quale non necessariamente \u00e8 possibile ripristinare l'originale. Questo tipo di compressione non viene applicato a file di testo o in generale a tutti quei file in cui anche una sola virgola di differenza provocherebbe problemi in fase di utilizzo. La compressione con perdita si applica invece principalmente ai file multimediali come ad esempio le immagini, le tracce vocali o musicali, i film ecc. In questa tipologia di file infatti non \u00e8 indispensabile che la versione compressa sia identica all'originale. \u00c8 sufficiente invece che un'immagine o un suono compressi siano abbastanza simili all'originale da far s\u00ec che non se ne noti la differenza. Non \u00e8 importante che il dato sia perfetto ma che sia sufficientemente fedele da impedire all'occhio o all'orecchio umano di avvertire la diminuzione di qualit\u00e0. E dunque nella compressione con perdita esiste questo concetto della qualit\u00e0 e cio\u00e8 una misura che esprime la quantit\u00e0 di informazioni conservate in fase di compressione. In pratica se la qualit\u00e0 del file \u00e8 alta allora l'algoritmo di compressione avr\u00e0 scartato pochi dati. Man mano che si spinge l'algoritmo a scartare pi\u00f9 informazioni si riduce la dimensione del file compresso ma a discapito della qualit\u00e0 dell'immagine o del suono. Ma come funziona dunque questo algoritmo di compressione? Per capirlo concentriamoci innanzitutto sulla lavorazione delle immagini. Le immagini vengono rappresentate in informatica come insiemi di pixel cio\u00e8 di piccolissimi quadrati colorati che messi uno di fianco all'altro vanno a comporre una foto o un disegno. In un normale televisore full hd ad esempio le immagini di film che stiamo guardando sono composte da 1920 colonne e 1080 righe di questi pixel. Abbiamo quindi in totale circa 2 milioni di pixel e cio\u00e8 2 megapixel. Sempre semplificando al massimo diciamo che la compressione di un'immagine del genere funziona pi\u00f9 o meno in questo modo. Nel file compresso riportiamo i pixel del file di partenza prendendo una riga s\u00ec e una no e contemporaneamente una colonna s\u00ec e una no. In pratica una volta finito avremmo escluso la met\u00e0 delle righe la met\u00e0 delle colonne e quindi i tre quarti dei pixel. Pixel che sono di fatto andati persi nella compressione e da qui il nome di compressione con perdita. Il file risultante avr\u00e0 quindi una dimensione di un quarto dell'originale. Va da s\u00e9 che avendo perso il 75% delle informazioni se tentassimo di ripristinare il file originale otterremo un risultato abbastanza diverso. L'immagine probabilmente sarebbe comunque distinguibile ma non sarebbe affatto quella di partenza. Ora la procedura che abbiamo descritto non \u00e8 quella reale ma un qualcosa di simile che ci \u00e8 servito per comprendere il concetto di base. In un formato reale come ad esempio il jpeg che anche se viene utilizzato direttamente dai software \u00e8 di fatto un formato compresso la tecnica prevede comunque la perdita di pixel ma la scelta di quali informazioni scartare viene effettuata in modo molto pi\u00f9 complesso. Non \u00e8 possibile illustrare in un podcast l'intero processo tuttavia possiamo dire che le porzioni di pixel su cui lavora l'algoritmo non sono righe e colonne quanto piuttosto dei quadrati la cui dimensione aumenta o diminuisce in base al grado di qualit\u00e0 che si vuole ottenere. Pi\u00f9 grandi saranno i quadrati esaminati minore sar\u00e0 la qualit\u00e0 dell'immagine compressa. L'algoritmo infatti selezioner\u00e0 tra tutti i pixel del quadrato quelli il cui valore ritiene meno importante e semplicemente li eliminer\u00e0 durante la compressione. Da quanto abbiamo appena detto si pu\u00f2 quindi dedurre una cosa e cio\u00e8 che tutte le scene dei film e delle serie tv in cui l'esperto della scientifica utilizza un non meglio definito software per incrementare la risoluzione dell'immagine della telecamera o di una macchina fotografica... beh sono cavolate non \u00e8 possibile recuperare informazioni da file in cui le informazioni semplicemente non ci sono. Per concludere il discorso anche i file audio come gli mp3 sono in effetti formati compressi e utilizzano la stessa logica del formato jpeg in pratica suddividono l'audio in varie porzioni e ne eliminano le parti che ritengono non fondamentali. Anche in questo caso il risultato finale non sar\u00e0 identico all'originale ma sar\u00e0 sufficientemente simile da essere apprezzabile e occuper\u00e0 molto meno spazio in memoria. E anche per oggi siamo giunti al termine dell'episodio. Io spero che questa nuova rubrica vi piaccia perch\u00e9 ho in serbo molti altri episodi. Come al solito vi ringrazio per aver ascoltato fin qui e vi chiedo di condividere il podcast e se vi va di unirvi al gruppo telegram che trovate in descrizione. Vi ricordo che potete seguirmi su instagram e ascoltare il podcast sulle principali piattaforme tra cui ad esempio spotify google podcast itunes e anche alexa. Vi baster\u00e0 dire alexa apri pensieri in codice. E dunque per oggi \u00e8 tutto io vi saluto e vi do appuntamento al prossimo", "segments": [{"id": 1, "seek": 2580, "start": 0.0, "end": 9.96, "text": " Pensieri in codice. Idee dal mondo del software a cura di Valerio Galano.", "tokens": [50364, 45035, 45980, 294, 17656, 573, 13, 13090, 68, 11702, 40499, 1103, 4722, 257, 1262, 64, 1026, 7188, 260, 1004, 7336, 3730, 13, 50862], "temperature": 0.0, "avg_logprob": -0.3148584928152696, "compression_ratio": 1.319672131147541, "no_speech_prob": 0.10723876953125, "words": null}, {"id": 2, "seek": 2580, "start": 19.96, "end": 25.8, "text": " Buongiorno a tutti ragazzi e ben ritrovati per un nuovo episodio di Pensieri in codice,", "tokens": [51362, 4078, 556, 1973, 1771, 257, 19822, 17539, 33910, 308, 3271, 11289, 24088, 6908, 680, 517, 49348, 39200, 1004, 1026, 45035, 45980, 294, 17656, 573, 11, 51654], "temperature": 0.0, "avg_logprob": -0.3148584928152696, "compression_ratio": 1.319672131147541, "no_speech_prob": 0.10723876953125, "words": null}, {"id": 3, "seek": 5396, "start": 25.8, "end": 31.48, "text": " il podcast in cui parliamo di argomenti presi dal mondo del software, di internet e della", "tokens": [50364, 1930, 7367, 294, 22929, 971, 49926, 1026, 3882, 298, 23012, 1183, 72, 11702, 40499, 1103, 4722, 11, 1026, 4705, 308, 11618, 50648], "temperature": 0.0, "avg_logprob": -0.19651442066981242, "compression_ratio": 1.578397212543554, "no_speech_prob": 0.0067901611328125, "words": null}, {"id": 4, "seek": 5396, "start": 31.48, "end": 36.6, "text": " programmazione. Prima di partire subito con l'argomento di oggi una piccola comunicazione", "tokens": [50648, 37648, 12928, 13, 2114, 4775, 1026, 644, 621, 1422, 3528, 416, 287, 6, 289, 30851, 15467, 1026, 34768, 2002, 13363, 66, 4711, 31710, 12928, 50904], "temperature": 0.0, "avg_logprob": -0.19651442066981242, "compression_ratio": 1.578397212543554, "no_speech_prob": 0.0067901611328125, "words": null}, {"id": 5, "seek": 5396, "start": 36.6, "end": 43.24, "text": " di servizio. Il 12 ottobre 2019 si terr\u00e0 a Milano il festival del podcasting e Pensieri", "tokens": [50904, 1026, 1658, 590, 1004, 13, 4416, 2272, 42772, 996, 265, 6071, 1511, 7245, 1467, 257, 7036, 3730, 1930, 12091, 1103, 7367, 278, 308, 45035, 45980, 51236], "temperature": 0.0, "avg_logprob": -0.19651442066981242, "compression_ratio": 1.578397212543554, "no_speech_prob": 0.0067901611328125, "words": null}, {"id": 6, "seek": 5396, "start": 43.24, "end": 48.36, "text": " in codice \u00e8 candidato come miglior podcast emergente. I primi dieci classificati verranno", "tokens": [51236, 294, 17656, 573, 4873, 6268, 2513, 808, 6186, 75, 1973, 7367, 4345, 70, 1576, 13, 286, 2886, 72, 978, 537, 1508, 1089, 6908, 45923, 13484, 51492], "temperature": 0.0, "avg_logprob": -0.19651442066981242, "compression_ratio": 1.578397212543554, "no_speech_prob": 0.0067901611328125, "words": null}, {"id": 7, "seek": 5396, "start": 48.36, "end": 53.96, "text": " annunciati sul palco del festival, quindi se vi va di aiutarmi nel contest fermate un secondo", "tokens": [51492, 2324, 11228, 6908, 17603, 3984, 1291, 1103, 12091, 11, 15727, 369, 1932, 2773, 1026, 9783, 32142, 3057, 15373, 10287, 26558, 473, 517, 41601, 51772], "temperature": 0.0, "avg_logprob": -0.19651442066981242, "compression_ratio": 1.578397212543554, "no_speech_prob": 0.0067901611328125, "words": null}, {"id": 8, "seek": 8284, "start": 53.96, "end": 60.08, "text": " il podcast e collegatevi al link vota.pensierincodice.it, lo trovate anche in", "tokens": [50364, 1930, 7367, 308, 13300, 473, 4917, 419, 2113, 3478, 64, 13, 79, 694, 811, 4647, 378, 573, 13, 270, 11, 450, 4495, 19083, 11585, 294, 50670], "temperature": 0.0, "avg_logprob": -0.2042025878511626, "compression_ratio": 1.6035087719298247, "no_speech_prob": 0.1517333984375, "words": null}, {"id": 9, "seek": 8284, "start": 60.08, "end": 66.32, "text": " descrizione. Si aprir\u00e0 un post Instagram e non dovrete fare altro che mettere un like. Vi", "tokens": [50670, 2189, 19706, 13, 4909, 10992, 347, 1467, 517, 2183, 5281, 308, 2107, 30870, 7600, 11994, 40924, 947, 27812, 323, 517, 411, 13, 6626, 50982], "temperature": 0.0, "avg_logprob": -0.2042025878511626, "compression_ratio": 1.6035087719298247, "no_speech_prob": 0.1517333984375, "words": null}, {"id": 10, "seek": 8284, "start": 66.32, "end": 71.72, "text": " ringrazio tutti per il supporto e ora procediamo con l'argomento del giorno. Come per l'episodio", "tokens": [50982, 4875, 30695, 1004, 19822, 680, 1930, 1406, 78, 308, 33714, 6682, 7415, 416, 287, 6, 289, 30851, 15467, 1103, 42202, 13, 2492, 680, 287, 6, 595, 271, 378, 1004, 51252], "temperature": 0.0, "avg_logprob": -0.2042025878511626, "compression_ratio": 1.6035087719298247, "no_speech_prob": 0.1517333984375, "words": null}, {"id": 11, "seek": 8284, "start": 71.72, "end": 77.36, "text": " della settimana scorsa, anche oggi diamo il via ad una nuova rubrica che chiameremo Algoritmi e", "tokens": [51252, 11618, 5584, 36497, 795, 38822, 11, 11585, 34768, 7484, 78, 1930, 5766, 614, 2002, 3822, 27924, 5915, 15192, 947, 417, 2918, 323, 3280, 967, 26465, 270, 3057, 308, 51534], "temperature": 0.0, "avg_logprob": -0.2042025878511626, "compression_ratio": 1.6035087719298247, "no_speech_prob": 0.1517333984375, "words": null}, {"id": 12, "seek": 8284, "start": 77.36, "end": 82.84, "text": " nella quale parleremo, indovinate un po', di algoritmi. Negli episodi di questa rubrica andremo", "tokens": [51534, 23878, 421, 1220, 13734, 323, 3280, 11, 13770, 4796, 473, 517, 714, 6098, 1026, 3501, 50017, 3057, 13, 19103, 2081, 2927, 30727, 1026, 16540, 5915, 15192, 293, 44172, 51808], "temperature": 0.0, "avg_logprob": -0.2042025878511626, "compression_ratio": 1.6035087719298247, "no_speech_prob": 0.1517333984375, "words": null}, {"id": 13, "seek": 11224, "start": 82.84, "end": 88.12, "text": " ad esaminare quali sono le logiche alla base dei pi\u00f9 importanti algoritmi e proveremo a capire,", "tokens": [50364, 614, 785, 7428, 543, 4101, 72, 9259, 476, 3565, 9304, 11591, 3096, 13874, 10589, 1021, 72, 3501, 50017, 3057, 308, 1439, 323, 3280, 257, 1410, 621, 11, 50628], "temperature": 0.0, "avg_logprob": -0.20245535735573086, "compression_ratio": 1.5808580858085808, "no_speech_prob": 0.1729736328125, "words": null}, {"id": 14, "seek": 11224, "start": 88.12, "end": 94.60000000000001, "text": " almeno a grandi linee, come funzionano. Questo perch\u00e9 in generale siamo ben abituati a parlare", "tokens": [50628, 419, 43232, 257, 45155, 1622, 68, 11, 808, 49345, 313, 3730, 13, 38167, 14303, 294, 1337, 1220, 33459, 3271, 410, 6380, 6908, 257, 13734, 543, 50952], "temperature": 0.0, "avg_logprob": -0.20245535735573086, "compression_ratio": 1.5808580858085808, "no_speech_prob": 0.1729736328125, "words": null}, {"id": 15, "seek": 11224, "start": 94.60000000000001, "end": 100.52000000000001, "text": " dei progressi nel campo dell'hardware. Compriamo l'ultimo modello di smartphone che ha la fotocamera", "tokens": [50952, 13874, 4205, 72, 15373, 29691, 19781, 6, 21491, 3039, 13, 2432, 1424, 7415, 287, 6, 723, 6934, 1072, 11216, 1026, 13307, 947, 324, 635, 15418, 905, 335, 1663, 51248], "temperature": 0.0, "avg_logprob": -0.20245535735573086, "compression_ratio": 1.5808580858085808, "no_speech_prob": 0.1729736328125, "words": null}, {"id": 16, "seek": 11224, "start": 100.52000000000001, "end": 106.64, "text": " con pi\u00f9 megapixel, il pc con il doppio della memoria del suo predecessore e cos\u00ec via. Per\u00f2", "tokens": [51248, 416, 10589, 34733, 34599, 11, 1930, 43451, 416, 1930, 44862, 1004, 11618, 1334, 8172, 1103, 34197, 24874, 780, 418, 308, 23278, 5766, 13, 20533, 51554], "temperature": 0.0, "avg_logprob": -0.20245535735573086, "compression_ratio": 1.5808580858085808, "no_speech_prob": 0.1729736328125, "words": null}, {"id": 17, "seek": 11224, "start": 106.64, "end": 112.24000000000001, "text": " non pensiamo mai al fatto che nelle azioni che compiamo tutti i giorni un buon algoritmo \u00e8", "tokens": [51554, 2107, 6099, 7415, 12698, 419, 23228, 947, 46350, 7883, 15273, 947, 715, 7415, 19822, 741, 36937, 72, 517, 758, 266, 3501, 50017, 3280, 4873, 51834], "temperature": 0.0, "avg_logprob": -0.20245535735573086, "compression_ratio": 1.5808580858085808, "no_speech_prob": 0.1729736328125, "words": null}, {"id": 18, "seek": 14152, "start": 112.24000000000001, "end": 118.28000000000002, "text": " altrettanto, se non addirittura pi\u00f9 importante, dell'hardware che utilizziamo. Pensate a cosa", "tokens": [50364, 4955, 14313, 5857, 11, 369, 2107, 909, 347, 593, 2991, 10589, 9416, 11, 19781, 6, 21491, 3039, 947, 40355, 7415, 13, 45035, 473, 257, 10163, 50666], "temperature": 0.0, "avg_logprob": -0.16224315262412373, "compression_ratio": 1.7183098591549295, "no_speech_prob": 0.002471923828125, "words": null}, {"id": 19, "seek": 14152, "start": 118.28000000000002, "end": 124.32000000000001, "text": " avete fatto ieri con il vostro smartphone o con il vostro pc. Magari avete trovato il percorso pi\u00f9", "tokens": [50666, 48201, 23228, 741, 16310, 416, 1930, 28944, 340, 13307, 277, 416, 1930, 28944, 340, 43451, 13, 6395, 3504, 48201, 35449, 2513, 1930, 680, 19558, 539, 10589, 50968], "temperature": 0.0, "avg_logprob": -0.16224315262412373, "compression_ratio": 1.7183098591549295, "no_speech_prob": 0.002471923828125, "words": null}, {"id": 20, "seek": 14152, "start": 124.32000000000001, "end": 130.32000000000002, "text": " breve per raggiungere la vostra destinazione o forse avete inviato il video del vostro cagnolino", "tokens": [50968, 48517, 680, 17539, 7834, 1063, 323, 635, 28944, 424, 40254, 12928, 277, 337, 405, 48201, 1048, 72, 2513, 1930, 960, 1103, 28944, 340, 269, 4535, 401, 2982, 51268], "temperature": 0.0, "avg_logprob": -0.16224315262412373, "compression_ratio": 1.7183098591549295, "no_speech_prob": 0.002471923828125, "words": null}, {"id": 21, "seek": 14152, "start": 130.32000000000002, "end": 135.96, "text": " ad un parente distante molti chilometri o forse ancora avete individuato il documento che volevate", "tokens": [51268, 614, 517, 2596, 68, 1483, 2879, 10739, 72, 38002, 649, 470, 277, 337, 405, 30656, 48201, 2461, 84, 2513, 1930, 4166, 78, 947, 1650, 28316, 473, 51550], "temperature": 0.0, "avg_logprob": -0.16224315262412373, "compression_ratio": 1.7183098591549295, "no_speech_prob": 0.002471923828125, "words": null}, {"id": 22, "seek": 14152, "start": 135.96, "end": 141.52, "text": " leggere in un archivio di svariati miliardi di documenti. Tutto questo l'avete potuto fare grazie", "tokens": [51550, 30991, 323, 294, 517, 3912, 592, 1004, 1026, 17342, 3504, 6908, 1962, 72, 38126, 1026, 4166, 72, 13, 18392, 1353, 10263, 287, 6, 706, 3498, 1847, 8262, 11994, 1295, 3283, 51828], "temperature": 0.0, "avg_logprob": -0.16224315262412373, "compression_ratio": 1.7183098591549295, "no_speech_prob": 0.002471923828125, "words": null}, {"id": 23, "seek": 16840, "start": 141.68, "end": 147.56, "text": " all'hardware di cui disponete, certo, ma anche grazie ad una serie di ingegnosi algoritmi che", "tokens": [50372, 439, 6, 21491, 3039, 1026, 22929, 23311, 3498, 11, 22261, 11, 463, 11585, 1295, 3283, 614, 2002, 23030, 1026, 3957, 1146, 16751, 72, 3501, 50017, 3057, 947, 50666], "temperature": 0.0, "avg_logprob": -0.1790081504462422, "compression_ratio": 1.752851711026616, "no_speech_prob": 0.0021495819091796875, "words": null}, {"id": 24, "seek": 16840, "start": 147.56, "end": 152.8, "text": " vi hanno permesso di trovare la distanza minore tra un insieme di punti o di comprimere e", "tokens": [50666, 1932, 26595, 4784, 5557, 1026, 35449, 543, 635, 1483, 20030, 923, 418, 944, 517, 1028, 44940, 1026, 18212, 72, 277, 1026, 715, 5565, 323, 308, 50928], "temperature": 0.0, "avg_logprob": -0.1790081504462422, "compression_ratio": 1.752851711026616, "no_speech_prob": 0.0021495819091796875, "words": null}, {"id": 25, "seek": 16840, "start": 152.8, "end": 158.0, "text": " trasmettere file audio e video o ancora grazie ad algoritmi di indicizzazione dei motori di", "tokens": [50928, 504, 14774, 3093, 323, 3991, 6278, 308, 960, 277, 30656, 1295, 3283, 614, 3501, 50017, 3057, 1026, 4694, 8072, 12928, 13874, 5932, 72, 1026, 51188], "temperature": 0.0, "avg_logprob": -0.1790081504462422, "compression_ratio": 1.752851711026616, "no_speech_prob": 0.0021495819091796875, "words": null}, {"id": 26, "seek": 16840, "start": 158.0, "end": 163.24, "text": " ricerca. Allo stesso modo sono tantissimi gli algoritmi che tutti i giorni, senza che nemmeno", "tokens": [51188, 21040, 36127, 13, 1057, 78, 44413, 16664, 9259, 12095, 891, 10121, 17161, 3501, 50017, 3057, 947, 19822, 741, 36937, 72, 11, 36208, 947, 408, 2174, 5808, 51450], "temperature": 0.0, "avg_logprob": -0.1790081504462422, "compression_ratio": 1.752851711026616, "no_speech_prob": 0.0021495819091796875, "words": null}, {"id": 27, "seek": 16840, "start": 163.24, "end": 168.4, "text": " ce ne accorgiamo, ci semplificano continuamente la vita o in qualche caso ce la complicano,", "tokens": [51450, 1769, 408, 1317, 4646, 7415, 11, 6983, 4361, 564, 1089, 3730, 2993, 3439, 635, 32712, 277, 294, 38737, 9666, 1769, 635, 16060, 3730, 11, 51708], "temperature": 0.0, "avg_logprob": -0.1790081504462422, "compression_ratio": 1.752851711026616, "no_speech_prob": 0.0021495819091796875, "words": null}, {"id": 28, "seek": 19636, "start": 168.4, "end": 174.08, "text": " ma di questo parleremo in futuro. Per questo motivo io credo che sia importante conoscere,", "tokens": [50364, 463, 1026, 10263, 13734, 323, 3280, 294, 23953, 13, 3026, 10263, 35804, 19785, 3864, 78, 947, 25176, 9416, 416, 10466, 323, 11, 50648], "temperature": 0.0, "avg_logprob": -0.20287893184526698, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0240325927734375, "words": null}, {"id": 29, "seek": 19636, "start": 174.08, "end": 179.44, "text": " o almeno comprendere, come funzionano tutti i grandi algoritmi che nel corso della storia", "tokens": [50648, 277, 419, 43232, 30765, 323, 11, 808, 49345, 313, 3730, 19822, 741, 45155, 3501, 50017, 3057, 947, 15373, 1181, 539, 11618, 5967, 654, 50916], "temperature": 0.0, "avg_logprob": -0.20287893184526698, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0240325927734375, "words": null}, {"id": 30, "seek": 19636, "start": 179.44, "end": 184.84, "text": " hanno contribuito a costruire il mondo cos\u00ec come noi oggi lo viviamo. Chiunque abbia gi\u00e0", "tokens": [50916, 26595, 4226, 22703, 257, 2063, 894, 621, 1930, 40499, 23278, 808, 22447, 34768, 450, 11005, 7415, 13, 17730, 409, 1077, 16903, 654, 30469, 51186], "temperature": 0.0, "avg_logprob": -0.20287893184526698, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0240325927734375, "words": null}, {"id": 31, "seek": 19636, "start": 184.84, "end": 190.28, "text": " un'infarinatura di programmazione o di informatica in generale conoscer\u00e0 gi\u00e0 la definizione formale", "tokens": [51186, 517, 6, 19920, 19829, 19660, 1026, 37648, 12928, 277, 1026, 1356, 267, 2262, 294, 1337, 1220, 49892, 1776, 1467, 30469, 635, 1561, 35740, 1254, 1220, 51458], "temperature": 0.0, "avg_logprob": -0.20287893184526698, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0240325927734375, "words": null}, {"id": 32, "seek": 19636, "start": 190.28, "end": 196.36, "text": " di algoritmo e cio\u00e8 qualcosa del tipo un algoritmo \u00e8 un insieme finito di passi", "tokens": [51458, 1026, 3501, 50017, 3280, 308, 41827, 42400, 1103, 9746, 517, 3501, 50017, 3280, 4873, 517, 1028, 44940, 962, 3528, 1026, 1320, 72, 51762], "temperature": 0.0, "avg_logprob": -0.20287893184526698, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.0240325927734375, "words": null}, {"id": 33, "seek": 22216, "start": 196.36, "end": 201.84, "text": " sufficientemente semplici che se eseguiti nell'ordine permettono di trasformare un dato", "tokens": [50364, 11563, 16288, 4361, 4770, 72, 947, 369, 785, 1146, 1983, 72, 44666, 6, 765, 533, 20696, 1756, 78, 1026, 22507, 837, 543, 517, 46971, 50638], "temperature": 0.0, "avg_logprob": -0.18680862831858408, "compression_ratio": 1.6103896103896105, "no_speech_prob": 0.21435546875, "words": null}, {"id": 34, "seek": 22216, "start": 201.84, "end": 207.84, "text": " input in un dato output. Tuttavia in questa rubrica vorrei mettere in luce il fatto che", "tokens": [50638, 4846, 294, 517, 46971, 5598, 13, 314, 13478, 23015, 294, 16540, 5915, 15192, 4245, 10271, 27812, 323, 294, 287, 4176, 1930, 23228, 947, 50938], "temperature": 0.0, "avg_logprob": -0.18680862831858408, "compression_ratio": 1.6103896103896105, "no_speech_prob": 0.21435546875, "words": null}, {"id": 35, "seek": 22216, "start": 207.84, "end": 215.44000000000003, "text": " un algoritmo, per come la vedo io, non \u00e8 soltanto questo. Un algoritmo, secondo me, \u00e8 la rappresentazione", "tokens": [50938, 517, 3501, 50017, 3280, 11, 680, 808, 635, 14267, 78, 19785, 11, 2107, 4873, 1404, 83, 5857, 10263, 13, 1156, 3501, 50017, 3280, 11, 41601, 385, 11, 4873, 635, 8125, 11662, 12928, 51318], "temperature": 0.0, "avg_logprob": -0.18680862831858408, "compression_ratio": 1.6103896103896105, "no_speech_prob": 0.21435546875, "words": null}, {"id": 36, "seek": 22216, "start": 215.44000000000003, "end": 222.16000000000003, "text": " di un'idea. Una descrizione precisa ed elegante di una soluzione ad un dato problema. Di", "tokens": [51318, 1026, 517, 6, 482, 64, 13, 15491, 2189, 19706, 18861, 1257, 14459, 2879, 1026, 2002, 1404, 3334, 5328, 614, 517, 46971, 12395, 13, 8789, 51654], "temperature": 0.0, "avg_logprob": -0.18680862831858408, "compression_ratio": 1.6103896103896105, "no_speech_prob": 0.21435546875, "words": null}, {"id": 37, "seek": 24900, "start": 222.16, "end": 227.68, "text": " conseguenza potremmo definire un grande algoritmo come la pi\u00f9 efficiente, la pi\u00f9 elegante e, in", "tokens": [50364, 12706, 23691, 1847, 265, 2174, 78, 1561, 621, 517, 8883, 3501, 50017, 3280, 808, 635, 10589, 7148, 68, 11, 635, 10589, 14459, 2879, 308, 11, 294, 50640], "temperature": 0.0, "avg_logprob": -0.17807904521332069, "compression_ratio": 1.7462686567164178, "no_speech_prob": 0.184326171875, "words": null}, {"id": 38, "seek": 24900, "start": 227.68, "end": 232.76, "text": " generale, la migliore delle soluzioni che al momento conosciamo per problemi reali che", "tokens": [50640, 1337, 1220, 11, 635, 6186, 2081, 418, 16485, 1404, 3334, 15273, 947, 419, 9333, 49892, 42052, 680, 1154, 72, 957, 72, 947, 50894], "temperature": 0.0, "avg_logprob": -0.17807904521332069, "compression_ratio": 1.7462686567164178, "no_speech_prob": 0.184326171875, "words": null}, {"id": 39, "seek": 24900, "start": 232.76, "end": 238.07999999999998, "text": " affrontiamo ogni giorno. Tra gli argomenti che potenzialmente potranno entrare a far parte di", "tokens": [50894, 2096, 10001, 7415, 33189, 42202, 13, 5403, 17161, 3882, 298, 23012, 947, 1847, 11368, 831, 4082, 1847, 81, 13484, 22284, 265, 257, 1400, 6975, 1026, 51160], "temperature": 0.0, "avg_logprob": -0.17807904521332069, "compression_ratio": 1.7462686567164178, "no_speech_prob": 0.184326171875, "words": null}, {"id": 40, "seek": 24900, "start": 238.07999999999998, "end": 243.24, "text": " questa rubrica ci saranno dunque algoritmi di utilizzo quotidiano come quelli di criptografia,", "tokens": [51160, 16540, 5915, 15192, 6983, 13782, 13484, 10234, 1077, 3501, 50017, 3057, 1026, 19906, 4765, 44017, 6254, 808, 631, 16320, 1026, 12815, 662, 19815, 654, 11, 51418], "temperature": 0.0, "avg_logprob": -0.17807904521332069, "compression_ratio": 1.7462686567164178, "no_speech_prob": 0.184326171875, "words": null}, {"id": 41, "seek": 24900, "start": 243.24, "end": 249.0, "text": " di trasmissione, di ricerca, di ordinamento, di verifica della consistenza, varie tipologie di", "tokens": [51418, 1026, 504, 14774, 3106, 68, 11, 1026, 21040, 36127, 11, 1026, 25376, 8824, 11, 1026, 1306, 43377, 11618, 4603, 23691, 11, 1374, 414, 4125, 20121, 1026, 51706], "temperature": 0.0, "avg_logprob": -0.17807904521332069, "compression_ratio": 1.7462686567164178, "no_speech_prob": 0.184326171875, "words": null}, {"id": 42, "seek": 27680, "start": 249.04, "end": 255.92, "text": " machine learning e molto molto altro. Nell'episodio di oggi parleremo dell'algoritmo di compressione,", "tokens": [50366, 3479, 2539, 308, 16394, 16394, 40924, 13, 426, 898, 6, 595, 271, 378, 1004, 1026, 34768, 13734, 323, 3280, 19781, 6, 20422, 50017, 3280, 1026, 14778, 5328, 11, 50710], "temperature": 0.0, "avg_logprob": -0.2399764118610688, "compression_ratio": 1.6536796536796536, "no_speech_prob": 0.1751708984375, "words": null}, {"id": 43, "seek": 27680, "start": 255.92, "end": 261.92, "text": " una funzionalit\u00e0 che magari crediamo di utilizzare di tanto in tanto ma che, come vedremo fra poco,", "tokens": [50710, 2002, 49345, 1966, 12445, 947, 49932, 3864, 7415, 1026, 40355, 543, 1026, 10331, 294, 10331, 463, 947, 11, 808, 14267, 44172, 6600, 10639, 11, 51010], "temperature": 0.0, "avg_logprob": -0.2399764118610688, "compression_ratio": 1.6536796536796536, "no_speech_prob": 0.1751708984375, "words": null}, {"id": 44, "seek": 27680, "start": 261.92, "end": 265.76, "text": " ci accompagna praticamente ogni giorno senza che nemmeno ce ne rendiamo conto.", "tokens": [51010, 6983, 18037, 35697, 45734, 33189, 42202, 36208, 947, 408, 2174, 5808, 1769, 408, 6125, 7415, 660, 78, 13, 51202], "temperature": 0.0, "avg_logprob": -0.2399764118610688, "compression_ratio": 1.6536796536796536, "no_speech_prob": 0.1751708984375, "words": null}, {"id": 45, "seek": 27680, "start": 265.76, "end": 276.8, "text": " Tutti i file che memorizziamo nei nostri dispositivi, che scambiamo ogni giorno e che archiviamo nel", "tokens": [51202, 18392, 7317, 741, 3991, 947, 10560, 8072, 7415, 34517, 10397, 470, 34769, 33448, 11, 947, 795, 2173, 7415, 33189, 42202, 308, 947, 3912, 592, 7415, 15373, 51754], "temperature": 0.0, "avg_logprob": -0.2399764118610688, "compression_ratio": 1.6536796536796536, "no_speech_prob": 0.1751708984375, "words": null}, {"id": 46, "seek": 30408, "start": 276.8, "end": 283.8, "text": " cloud, hanno una caratteristica che prende il nome di dimensione o peso a seconda dei contesti e che", "tokens": [50364, 4588, 11, 26595, 2002, 1032, 1161, 468, 2262, 947, 9866, 68, 1930, 19003, 1026, 10139, 68, 277, 28149, 257, 1150, 64, 13874, 10287, 72, 308, 947, 50714], "temperature": 0.0, "avg_logprob": -0.19846270449699893, "compression_ratio": 1.6521739130434783, "no_speech_prob": 0.02593994140625, "words": null}, {"id": 47, "seek": 30408, "start": 283.8, "end": 290.92, "text": " si esprime in byte e in relativi multipli come ad esempio il kilobyte o il kibibyte e, se non", "tokens": [50714, 1511, 785, 1424, 1312, 294, 40846, 308, 294, 21960, 72, 12788, 72, 808, 614, 33627, 1930, 5128, 13944, 975, 277, 1930, 350, 897, 897, 88, 975, 308, 11, 369, 2107, 51070], "temperature": 0.0, "avg_logprob": -0.19846270449699893, "compression_ratio": 1.6521739130434783, "no_speech_prob": 0.02593994140625, "words": null}, {"id": 48, "seek": 30408, "start": 290.92, "end": 298.12, "text": " avete mai sentito parlare di kibibyte, vi consiglio di ascoltare l'episodio numero 12 dal titolo", "tokens": [51070, 48201, 12698, 2279, 3528, 13734, 543, 1026, 350, 897, 897, 88, 975, 11, 1932, 40233, 19987, 1026, 15526, 4837, 543, 287, 6, 595, 271, 378, 1004, 46839, 2272, 11702, 3459, 7902, 51430], "temperature": 0.0, "avg_logprob": -0.19846270449699893, "compression_ratio": 1.6521739130434783, "no_speech_prob": 0.02593994140625, "words": null}, {"id": 49, "seek": 30408, "start": 298.12, "end": 304.08000000000004, "text": " La storia del kibibyte. Questa dimensione rappresenta lo spazio che il file occupa nella", "tokens": [51430, 2369, 5967, 654, 1103, 350, 897, 897, 88, 975, 13, 2326, 7841, 10139, 68, 8125, 495, 8938, 450, 637, 921, 1004, 947, 1930, 3991, 8073, 64, 23878, 51728], "temperature": 0.0, "avg_logprob": -0.19846270449699893, "compression_ratio": 1.6521739130434783, "no_speech_prob": 0.02593994140625, "words": null}, {"id": 50, "seek": 33156, "start": 304.08, "end": 308.47999999999996, "text": " memoria di archiviazione. Maggiore sar\u00e0 la dimensione del file, minore sar\u00e0 il numero", "tokens": [50364, 1334, 8172, 1026, 3912, 18503, 19706, 13, 6395, 7834, 418, 41338, 635, 10139, 68, 1103, 3991, 11, 923, 418, 41338, 1930, 46839, 50584], "temperature": 0.0, "avg_logprob": -0.20144231502826399, "compression_ratio": 1.7330960854092528, "no_speech_prob": 0.3408203125, "words": null}, {"id": 51, "seek": 33156, "start": 308.47999999999996, "end": 314.0, "text": " di file che riusciremo ad archiviare nella memoria dei nostri dispositivi. Dal momento per\u00f2 che con", "tokens": [50584, 1026, 3991, 947, 367, 4872, 537, 44172, 614, 3912, 33448, 543, 23878, 1334, 8172, 13874, 10397, 470, 34769, 33448, 13, 17357, 9333, 12673, 947, 416, 50860], "temperature": 0.0, "avg_logprob": -0.20144231502826399, "compression_ratio": 1.7330960854092528, "no_speech_prob": 0.3408203125, "words": null}, {"id": 52, "seek": 33156, "start": 314.0, "end": 319.76, "text": " il passare del tempo le memorie sono progressivamente divenute sempre pi\u00f9 grandi e al tempo stesso sempre", "tokens": [50860, 1930, 1320, 543, 1103, 8972, 476, 10560, 414, 9259, 4205, 23957, 1026, 553, 1169, 9553, 10589, 45155, 308, 419, 8972, 44413, 9553, 51148], "temperature": 0.0, "avg_logprob": -0.20144231502826399, "compression_ratio": 1.7330960854092528, "no_speech_prob": 0.3408203125, "words": null}, {"id": 53, "seek": 33156, "start": 319.76, "end": 325.64, "text": " pi\u00f9 economiche, noi non sentiamo effettivamente il bisogno di comprimere i file per ridurne la", "tokens": [51148, 10589, 2520, 9304, 11, 22447, 2107, 2279, 7415, 1244, 3093, 23957, 1930, 40505, 1771, 1026, 715, 5565, 323, 741, 3991, 680, 3973, 374, 716, 635, 51442], "temperature": 0.0, "avg_logprob": -0.20144231502826399, "compression_ratio": 1.7330960854092528, "no_speech_prob": 0.3408203125, "words": null}, {"id": 54, "seek": 33156, "start": 325.64, "end": 331.56, "text": " dimensione cos\u00ec come accadeva di norma fino a qualche anno fa. Nonostante ci\u00f2 la compressione", "tokens": [51442, 10139, 68, 23278, 808, 1317, 762, 2757, 1026, 2026, 64, 42560, 257, 38737, 46277, 2050, 13, 8774, 555, 2879, 6983, 4293, 635, 14778, 5328, 51738], "temperature": 0.0, "avg_logprob": -0.20144231502826399, "compression_ratio": 1.7330960854092528, "no_speech_prob": 0.3408203125, "words": null}, {"id": 55, "seek": 35768, "start": 331.56, "end": 335.92, "text": " resta una parte fondamentale sia per la trasmissione che per l'archiviazione dei dati.", "tokens": [50364, 1472, 64, 2002, 6975, 9557, 2466, 1220, 25176, 680, 635, 504, 14774, 3106, 68, 947, 680, 287, 6, 1178, 18503, 19706, 13874, 1137, 72, 13, 50582], "temperature": 0.0, "avg_logprob": -0.19210271317829458, "compression_ratio": 1.7213740458015268, "no_speech_prob": 0.033050537109375, "words": null}, {"id": 56, "seek": 35768, "start": 335.92, "end": 340.96, "text": " Tutte le grandi piattaforme di streaming ad esempio utilizzano la compressione sui propri", "tokens": [50582, 18392, 975, 476, 45155, 3895, 18405, 44562, 1026, 11791, 614, 33627, 40355, 3730, 635, 14778, 5328, 459, 72, 40465, 50834], "temperature": 0.0, "avg_logprob": -0.19210271317829458, "compression_ratio": 1.7213740458015268, "no_speech_prob": 0.033050537109375, "words": null}, {"id": 57, "seek": 35768, "start": 340.96, "end": 346.24, "text": " contenuti e questo diminuisce di gran lunga l'ampiezza di banda necessaria per noi per", "tokens": [50834, 21795, 29161, 308, 10263, 15739, 8479, 384, 1026, 9370, 16730, 64, 287, 6, 1215, 18812, 2394, 1026, 38727, 2688, 9831, 680, 22447, 680, 51098], "temperature": 0.0, "avg_logprob": -0.19210271317829458, "compression_ratio": 1.7213740458015268, "no_speech_prob": 0.033050537109375, "words": null}, {"id": 58, "seek": 35768, "start": 346.24, "end": 351.16, "text": " guardare un film o per ascoltare la musica. Lo stesso discorso vale per i servizi di", "tokens": [51098, 6290, 543, 517, 2007, 277, 680, 15526, 4837, 543, 635, 1318, 64, 13, 6130, 44413, 2983, 284, 539, 15474, 680, 741, 1658, 24300, 1026, 51344], "temperature": 0.0, "avg_logprob": -0.19210271317829458, "compression_ratio": 1.7213740458015268, "no_speech_prob": 0.033050537109375, "words": null}, {"id": 59, "seek": 35768, "start": 351.16, "end": 357.68, "text": " sincronizzazione dei file come ad esempio Dropbox e simili, ma in pi\u00f9 essi utilizzano la compressione", "tokens": [51344, 3343, 66, 2044, 8072, 12928, 13874, 3991, 808, 614, 33627, 17675, 4995, 308, 1034, 2312, 11, 463, 294, 10589, 2097, 72, 40355, 3730, 635, 14778, 5328, 51670], "temperature": 0.0, "avg_logprob": -0.19210271317829458, "compression_ratio": 1.7213740458015268, "no_speech_prob": 0.033050537109375, "words": null}, {"id": 60, "seek": 38372, "start": 357.68, "end": 362.6, "text": " anche per conservare i nostri dati e quindi per risparmiare sulle quantit\u00e0 di memoria di", "tokens": [50364, 11585, 680, 9704, 543, 741, 10397, 470, 1137, 72, 308, 15727, 680, 2253, 2181, 3057, 543, 459, 2447, 4426, 12445, 1026, 1334, 8172, 1026, 50610], "temperature": 0.0, "avg_logprob": -0.19167462491807136, "compression_ratio": 1.6514084507042253, "no_speech_prob": 0.20654296875, "words": null}, {"id": 61, "seek": 38372, "start": 362.6, "end": 368.40000000000003, "text": " archiviazione necessarie. Le compagnie telefoniche anche comprimono la voce durante le chiamate per", "tokens": [50610, 3912, 18503, 19706, 2688, 289, 414, 13, 1456, 715, 559, 2766, 26812, 9304, 11585, 715, 5565, 8957, 635, 1650, 384, 14427, 476, 417, 2918, 473, 680, 50900], "temperature": 0.0, "avg_logprob": -0.19167462491807136, "compression_ratio": 1.6514084507042253, "no_speech_prob": 0.20654296875, "words": null}, {"id": 62, "seek": 38372, "start": 368.40000000000003, "end": 373.24, "text": " poter sfruttare maggiormente le linee e si potrebbe andare avanti per molto perch\u00e9 gli esempi sono", "tokens": [50900, 1847, 260, 262, 5779, 13478, 543, 44639, 1973, 4082, 476, 1622, 68, 308, 1511, 1847, 39487, 42742, 1305, 11520, 680, 16394, 14303, 17161, 32340, 72, 9259, 51142], "temperature": 0.0, "avg_logprob": -0.19167462491807136, "compression_ratio": 1.6514084507042253, "no_speech_prob": 0.20654296875, "words": null}, {"id": 63, "seek": 38372, "start": 373.24, "end": 378.52, "text": " tantissimi. Ma come funziona in effetti questa operazione che prende il nome di compressione?", "tokens": [51142, 12095, 891, 10121, 13, 4042, 808, 49345, 21758, 294, 1244, 12495, 16540, 2208, 12928, 947, 9866, 68, 1930, 19003, 1026, 14778, 5328, 30, 51406], "temperature": 0.0, "avg_logprob": -0.19167462491807136, "compression_ratio": 1.6514084507042253, "no_speech_prob": 0.20654296875, "words": null}, {"id": 64, "seek": 38372, "start": 378.52, "end": 383.72, "text": " Innanzitutto partiamo col chiarire che la compressione pu\u00f2 essere di due tipi quella", "tokens": [51406, 34066, 3910, 270, 28698, 644, 7415, 1173, 47454, 621, 947, 635, 14778, 5328, 26526, 19799, 1026, 3462, 4125, 72, 32234, 51666], "temperature": 0.0, "avg_logprob": -0.19167462491807136, "compression_ratio": 1.6514084507042253, "no_speech_prob": 0.20654296875, "words": null}, {"id": 65, "seek": 40992, "start": 383.72, "end": 390.16, "text": " senza perdita di informazione e quella con perdita di informazione. Per compressione senza perdita", "tokens": [50364, 36208, 12611, 2786, 1026, 1356, 12928, 308, 32234, 416, 12611, 2786, 1026, 1356, 12928, 13, 3026, 14778, 5328, 36208, 12611, 2786, 50686], "temperature": 0.0, "avg_logprob": -0.2527043286424417, "compression_ratio": 1.8985507246376812, "no_speech_prob": 0.0384521484375, "words": null}, {"id": 66, "seek": 40992, "start": 390.16, "end": 396.84000000000003, "text": " si intende quel tipo di compressione in cui il file compresso, se decompresso, ritorna a essere", "tokens": [50686, 1511, 560, 5445, 7178, 9746, 1026, 14778, 5328, 294, 22929, 1930, 3991, 715, 29652, 11, 369, 22867, 29652, 11, 367, 3029, 629, 257, 19799, 51020], "temperature": 0.0, "avg_logprob": -0.2527043286424417, "compression_ratio": 1.8985507246376812, "no_speech_prob": 0.0384521484375, "words": null}, {"id": 67, "seek": 40992, "start": 396.84000000000003, "end": 402.72, "text": " esattamente identico al file di partenza. Il formato pi\u00f9 famoso di questo tipo di compressione", "tokens": [51020, 785, 1591, 3439, 2473, 2789, 419, 3991, 1026, 644, 23691, 13, 4416, 1254, 2513, 10589, 49526, 1026, 10263, 9746, 1026, 14778, 5328, 51314], "temperature": 0.0, "avg_logprob": -0.2527043286424417, "compression_ratio": 1.8985507246376812, "no_speech_prob": 0.0384521484375, "words": null}, {"id": 68, "seek": 40992, "start": 402.72, "end": 409.92, "text": " prende il nome di formato zip. Un file pu\u00f2 essere infatti zippato e dezippato pi\u00f9 volte senza che le", "tokens": [51314, 9866, 68, 1930, 19003, 1026, 1254, 2513, 20730, 13, 1156, 3991, 26526, 19799, 1536, 21515, 710, 2488, 2513, 308, 45057, 2488, 2513, 10589, 37801, 36208, 947, 476, 51674], "temperature": 0.0, "avg_logprob": -0.2527043286424417, "compression_ratio": 1.8985507246376812, "no_speech_prob": 0.0384521484375, "words": null}, {"id": 69, "seek": 43964, "start": 409.92, "end": 416.28000000000003, "text": " informazioni al suo interno vengano in alcun modo alterate. L'algoritmo del formato zip basa il", "tokens": [50364, 1356, 27569, 419, 34197, 728, 1771, 6138, 35255, 294, 20005, 409, 16664, 11337, 473, 13, 441, 6, 20422, 50017, 3280, 1103, 1254, 2513, 20730, 987, 64, 1930, 50682], "temperature": 0.0, "avg_logprob": -0.18295656070641592, "compression_ratio": 1.6700680272108843, "no_speech_prob": 0.015655517578125, "words": null}, {"id": 70, "seek": 43964, "start": 416.28000000000003, "end": 421.76, "text": " suo funzionamento sul fatto che i file vengono memorizzati sotto forma di stringhe di testo ed", "tokens": [50682, 34197, 49345, 313, 8824, 17603, 23228, 947, 741, 3991, 371, 1501, 8957, 10560, 8072, 6908, 43754, 8366, 1026, 6798, 675, 1026, 1500, 78, 1257, 50956], "temperature": 0.0, "avg_logprob": -0.18295656070641592, "compression_ratio": 1.6700680272108843, "no_speech_prob": 0.015655517578125, "words": null}, {"id": 71, "seek": 43964, "start": 421.76, "end": 428.04, "text": " applica a queste stringhe la combinazione di due operazioni. Badate bene, nella realt\u00e0 l'algoritmo", "tokens": [50956, 2580, 64, 257, 35455, 6798, 675, 635, 38514, 12928, 1026, 3462, 2208, 27569, 13, 11523, 473, 2537, 11, 23878, 47512, 287, 6, 20422, 50017, 3280, 51270], "temperature": 0.0, "avg_logprob": -0.18295656070641592, "compression_ratio": 1.6700680272108843, "no_speech_prob": 0.015655517578125, "words": null}, {"id": 72, "seek": 43964, "start": 428.04, "end": 434.04, "text": " non lavora direttamente sul testo ma a basso livello sulla codifica del file. Noi per\u00f2 cerchiamo", "tokens": [51270, 2107, 20923, 3252, 1264, 6319, 3439, 17603, 1500, 78, 463, 257, 987, 539, 1621, 1913, 33625, 17656, 43377, 1103, 3991, 13, 883, 72, 12673, 10146, 339, 7415, 51570], "temperature": 0.0, "avg_logprob": -0.18295656070641592, "compression_ratio": 1.6700680272108843, "no_speech_prob": 0.015655517578125, "words": null}, {"id": 73, "seek": 43964, "start": 434.04, "end": 439.64, "text": " di semplificare perch\u00e9 ci\u00f2 che ci interessa \u00e8 il concetto alla base. Quindi prima di tutto dicevamo", "tokens": [51570, 1026, 4361, 564, 1089, 543, 14303, 6983, 4293, 947, 6983, 728, 8391, 4873, 1930, 1588, 23778, 11591, 3096, 13, 32534, 19507, 1026, 23048, 10313, 85, 10502, 51850], "temperature": 0.0, "avg_logprob": -0.18295656070641592, "compression_ratio": 1.6700680272108843, "no_speech_prob": 0.015655517578125, "words": null}, {"id": 74, "seek": 46212, "start": 439.84, "end": 447.88, "text": " l'algoritmo individua le ripetizioni all'interno del testo. Se ad esempio trova la sequenza abc abc abc", "tokens": [50374, 287, 6, 20422, 50017, 3280, 2461, 4398, 476, 12782, 302, 590, 15273, 439, 6, 5106, 1771, 1103, 1500, 78, 13, 1100, 614, 33627, 4495, 2757, 635, 5123, 23691, 410, 66, 410, 66, 410, 66, 50776], "temperature": 0.0, "avg_logprob": -0.2286626305631412, "compression_ratio": 1.6120218579234973, "no_speech_prob": 0.001987457275390625, "words": null}, {"id": 75, "seek": 46212, "start": 447.88, "end": 456.08, "text": " la sostituisce con la sequenza abc per 3 che sta a significare che la sequenza abc in origine", "tokens": [50776, 635, 41585, 6380, 49596, 416, 635, 5123, 23691, 410, 66, 680, 805, 947, 11135, 257, 3350, 543, 947, 635, 5123, 23691, 410, 66, 294, 2349, 533, 51186], "temperature": 0.0, "avg_logprob": -0.2286626305631412, "compression_ratio": 1.6120218579234973, "no_speech_prob": 0.001987457275390625, "words": null}, {"id": 76, "seek": 46212, "start": 456.08, "end": 462.12, "text": " era ripetuta tre volte. Come possiamo vedere con questo semplice espediente un testo di lunghezza", "tokens": [51186, 4249, 12782, 302, 12093, 2192, 37801, 13, 2492, 44758, 35373, 416, 10263, 4361, 564, 573, 785, 3452, 8413, 517, 1500, 78, 1026, 16730, 675, 26786, 51488], "temperature": 0.0, "avg_logprob": -0.2286626305631412, "compression_ratio": 1.6120218579234973, "no_speech_prob": 0.001987457275390625, "words": null}, {"id": 77, "seek": 48900, "start": 462.36, "end": 470.16, "text": " 9 caratteri si \u00e8 gi\u00e0 ridotto a 5. Siamo quindi gi\u00e0 quasi ad una dimensione pari a met\u00e0 di quella", "tokens": [50376, 1722, 1032, 1161, 72, 1511, 4873, 30469, 3973, 18838, 257, 1025, 13, 318, 7415, 15727, 30469, 20954, 614, 2002, 10139, 68, 971, 72, 257, 1131, 1467, 1026, 32234, 50766], "temperature": 0.0, "avg_logprob": -0.2121340060556257, "compression_ratio": 1.5863453815261044, "no_speech_prob": 0.365966796875, "words": null}, {"id": 78, "seek": 48900, "start": 470.16, "end": 476.64, "text": " del file originale anche se badate bene che \u00e8 un esempio e sto semplificando estremamente. Il", "tokens": [50766, 1103, 3991, 4957, 1220, 11585, 369, 1578, 473, 2537, 947, 4873, 517, 33627, 308, 22784, 4361, 564, 1089, 1806, 871, 2579, 3439, 13, 4416, 51090], "temperature": 0.0, "avg_logprob": -0.2121340060556257, "compression_ratio": 1.5863453815261044, "no_speech_prob": 0.365966796875, "words": null}, {"id": 79, "seek": 48900, "start": 476.64, "end": 482.88, "text": " secondo passo che l'algoritmo applica \u00e8 quello di cercare le ripetizioni sparse per il testo quindi", "tokens": [51090, 41601, 38159, 947, 287, 6, 20422, 50017, 3280, 2580, 64, 4873, 22813, 1026, 10146, 5685, 476, 12782, 302, 590, 15273, 637, 11668, 680, 1930, 1500, 78, 15727, 51402], "temperature": 0.0, "avg_logprob": -0.2121340060556257, "compression_ratio": 1.5863453815261044, "no_speech_prob": 0.365966796875, "words": null}, {"id": 80, "seek": 48900, "start": 482.88, "end": 489.0, "text": " non pi\u00f9 quelle consecutive come nell'esempio precedente e le sostituisce con una rappresentazione", "tokens": [51402, 2107, 10589, 29237, 30497, 808, 44666, 6, 279, 15970, 1004, 16969, 1576, 308, 476, 41585, 6380, 49596, 416, 2002, 8125, 11662, 12928, 51708], "temperature": 0.0, "avg_logprob": -0.2121340060556257, "compression_ratio": 1.5863453815261044, "no_speech_prob": 0.365966796875, "words": null}, {"id": 81, "seek": 51500, "start": 489.12, "end": 495.52, "text": " abbreviata. Quindi se ad esempio nel testo dovesse essere presente sette volte la parola carota", "tokens": [50370, 35839, 3274, 13, 32534, 369, 614, 33627, 15373, 1500, 78, 360, 977, 405, 19799, 28709, 992, 975, 37801, 635, 971, 4711, 1032, 5377, 50690], "temperature": 0.0, "avg_logprob": -0.18669872253369063, "compression_ratio": 1.775229357798165, "no_speech_prob": 0.09661865234375, "words": null}, {"id": 82, "seek": 51500, "start": 495.52, "end": 502.76, "text": " l'algoritmo potrebbe sostituire tutte e sette le occorrenze con il numero 1. Se trovasse 5 volte", "tokens": [50690, 287, 6, 20422, 50017, 3280, 1847, 39487, 41585, 6380, 621, 38632, 308, 992, 975, 476, 2678, 284, 1095, 1381, 416, 1930, 46839, 502, 13, 1100, 4495, 7967, 405, 1025, 37801, 51052], "temperature": 0.0, "avg_logprob": -0.18669872253369063, "compression_ratio": 1.775229357798165, "no_speech_prob": 0.09661865234375, "words": null}, {"id": 83, "seek": 51500, "start": 502.76, "end": 508.64, "text": " la parola sedano la sostituirebbe magari con il numero 2 e zucca che compare due volte verrebbe", "tokens": [51052, 635, 971, 4711, 9643, 3730, 635, 41585, 6380, 621, 39042, 49932, 416, 1930, 46839, 568, 308, 710, 1311, 496, 947, 6794, 3462, 37801, 1306, 39487, 51346], "temperature": 0.0, "avg_logprob": -0.18669872253369063, "compression_ratio": 1.775229357798165, "no_speech_prob": 0.09661865234375, "words": null}, {"id": 84, "seek": 51500, "start": 508.64, "end": 515.0, "text": " sostituita con il numero 3 e cos\u00ec via. Nel fare queste sostituzioni l'algoritmo produrrebbe anche", "tokens": [51346, 41585, 270, 1983, 64, 416, 1930, 46839, 805, 308, 23278, 5766, 13, 426, 338, 11994, 35455, 41585, 270, 3334, 15273, 287, 6, 20422, 50017, 3280, 15792, 374, 39487, 11585, 51664], "temperature": 0.0, "avg_logprob": -0.18669872253369063, "compression_ratio": 1.775229357798165, "no_speech_prob": 0.09661865234375, "words": null}, {"id": 85, "seek": 53984, "start": 515.0, "end": 520.36, "text": " una piccola tabella per tenere conto dei collegamenti tra la parola originale e l'abbreviazione e la", "tokens": [50364, 2002, 13363, 66, 4711, 4421, 9885, 680, 2064, 323, 660, 78, 13874, 13300, 2466, 72, 944, 635, 971, 4711, 4957, 1220, 308, 287, 6, 455, 2672, 11617, 19706, 308, 635, 50632], "temperature": 0.0, "avg_logprob": -0.1807245511924271, "compression_ratio": 1.628099173553719, "no_speech_prob": 0.0694580078125, "words": null}, {"id": 86, "seek": 53984, "start": 520.36, "end": 526.32, "text": " inserirebbe all'interno del file zip risultante. Il risultato dell'applicazione di questi due", "tokens": [50632, 1028, 260, 621, 39042, 439, 6, 5106, 1771, 1103, 3991, 20730, 2253, 723, 2879, 13, 4416, 2253, 723, 2513, 19781, 6, 1746, 1050, 12928, 1026, 29729, 3462, 50930], "temperature": 0.0, "avg_logprob": -0.1807245511924271, "compression_ratio": 1.628099173553719, "no_speech_prob": 0.0694580078125, "words": null}, {"id": 87, "seek": 53984, "start": 526.32, "end": 532.88, "text": " passaggi sul file ne rappresenta una compressione senza perdita. Ne produce infatti una versione", "tokens": [50930, 1320, 46893, 17603, 3991, 408, 8125, 495, 8938, 2002, 19355, 68, 36208, 12611, 2786, 13, 1734, 5258, 1536, 21515, 2002, 3037, 68, 51258], "temperature": 0.0, "avg_logprob": -0.1807245511924271, "compression_ratio": 1.628099173553719, "no_speech_prob": 0.0694580078125, "words": null}, {"id": 88, "seek": 53984, "start": 532.88, "end": 539.84, "text": " molto pi\u00f9 piccola nella quale per\u00f2 sono contenute tutte le informazioni del file originale. Baster\u00e0", "tokens": [51258, 16394, 10589, 13363, 66, 4711, 23878, 421, 1220, 12673, 9259, 21795, 1169, 38632, 476, 1356, 27569, 1103, 3991, 4957, 1220, 13, 363, 1727, 1467, 51606], "temperature": 0.0, "avg_logprob": -0.1807245511924271, "compression_ratio": 1.628099173553719, "no_speech_prob": 0.0694580078125, "words": null}, {"id": 89, "seek": 56896, "start": 539.84, "end": 545.76, "text": " quindi applicare i passaggi precedentemente descritti in ordine inverso per ripristinare", "tokens": [50364, 15727, 2580, 543, 741, 1320, 46893, 37388, 16288, 7471, 18579, 72, 294, 4792, 533, 28653, 539, 680, 12782, 12940, 259, 543, 50660], "temperature": 0.0, "avg_logprob": -0.18431432646455118, "compression_ratio": 1.669683257918552, "no_speech_prob": 0.01427459716796875, "words": null}, {"id": 90, "seek": 56896, "start": 545.76, "end": 556.72, "text": " il file di partenza. Diversa invece \u00e8 la questione se si parla di algoritmi di compressione con", "tokens": [50660, 1930, 3991, 1026, 644, 23691, 13, 413, 1762, 64, 36344, 4873, 635, 1168, 68, 369, 1511, 971, 875, 1026, 3501, 50017, 3057, 1026, 19355, 68, 416, 51208], "temperature": 0.0, "avg_logprob": -0.18431432646455118, "compression_ratio": 1.669683257918552, "no_speech_prob": 0.01427459716796875, "words": null}, {"id": 91, "seek": 56896, "start": 556.72, "end": 563.36, "text": " perdita di informazione. In questo caso infatti la procedura prevede di produrre una versione", "tokens": [51208, 12611, 2786, 1026, 1356, 12928, 13, 682, 10263, 9666, 1536, 21515, 635, 6682, 2991, 659, 937, 68, 1026, 15792, 374, 265, 2002, 3037, 68, 51540], "temperature": 0.0, "avg_logprob": -0.18431432646455118, "compression_ratio": 1.669683257918552, "no_speech_prob": 0.01427459716796875, "words": null}, {"id": 92, "seek": 56896, "start": 563.36, "end": 568.96, "text": " compressa del file della quale non necessariamente \u00e8 possibile ripristinare l'originale.", "tokens": [51540, 14778, 64, 1103, 3991, 11618, 421, 1220, 2107, 2688, 45149, 4873, 50184, 12782, 12940, 259, 543, 287, 6, 20632, 259, 1220, 13, 51820], "temperature": 0.0, "avg_logprob": -0.18431432646455118, "compression_ratio": 1.669683257918552, "no_speech_prob": 0.01427459716796875, "words": null}, {"id": 93, "seek": 59372, "start": 569.6800000000001, "end": 574.96, "text": " Questo tipo di compressione non viene applicato a file di testo o in generale a tutti quei file", "tokens": [50400, 38167, 9746, 1026, 19355, 68, 2107, 19561, 2580, 2513, 257, 3991, 1026, 1500, 78, 277, 294, 1337, 1220, 257, 19822, 631, 72, 3991, 50664], "temperature": 0.0, "avg_logprob": -0.2367788485896129, "compression_ratio": 1.6488888888888888, "no_speech_prob": 0.00970458984375, "words": null}, {"id": 94, "seek": 59372, "start": 574.96, "end": 579.96, "text": " in cui anche una sola virgola di differenza provocherebbe problemi in fase di utilizzo.", "tokens": [50664, 294, 22929, 11585, 2002, 34162, 4107, 70, 4711, 1026, 743, 23691, 1439, 78, 339, 323, 39042, 1154, 72, 294, 33931, 1026, 19906, 4765, 13, 50914], "temperature": 0.0, "avg_logprob": -0.2367788485896129, "compression_ratio": 1.6488888888888888, "no_speech_prob": 0.00970458984375, "words": null}, {"id": 95, "seek": 59372, "start": 579.96, "end": 586.48, "text": " La compressione con perdita si applica invece principalmente ai file multimediali come ad", "tokens": [50914, 2369, 19355, 68, 416, 12611, 2786, 1511, 2580, 64, 36344, 32258, 9783, 3991, 32972, 292, 831, 72, 808, 614, 51240], "temperature": 0.0, "avg_logprob": -0.2367788485896129, "compression_ratio": 1.6488888888888888, "no_speech_prob": 0.00970458984375, "words": null}, {"id": 96, "seek": 59372, "start": 586.48, "end": 593.72, "text": " esempio le immagini, le tracce vocali o musicali, i film ecc. In questa tipologia di file infatti", "tokens": [51240, 33627, 476, 3397, 559, 3812, 11, 476, 504, 326, 384, 2329, 5103, 277, 9165, 72, 11, 741, 2007, 29613, 13, 682, 16540, 4125, 24103, 1026, 3991, 1536, 21515, 51602], "temperature": 0.0, "avg_logprob": -0.2367788485896129, "compression_ratio": 1.6488888888888888, "no_speech_prob": 0.00970458984375, "words": null}, {"id": 97, "seek": 61716, "start": 593.72, "end": 599.96, "text": " non \u00e8 indispensabile che la versione compressa sia identica all'originale. \u00c8 sufficiente invece", "tokens": [50364, 2107, 4873, 42937, 33288, 947, 635, 3037, 68, 14778, 64, 25176, 2473, 2262, 439, 6, 20632, 259, 1220, 13, 34495, 11563, 68, 36344, 50676], "temperature": 0.0, "avg_logprob": -0.18638393562287092, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.24462890625, "words": null}, {"id": 98, "seek": 61716, "start": 599.96, "end": 606.12, "text": " che un'immagine o un suono compressi siano abbastanza simili all'originale da far s\u00ec che", "tokens": [50676, 947, 517, 6, 6753, 10260, 277, 517, 459, 8957, 14778, 72, 262, 6254, 16903, 525, 20030, 1034, 2312, 439, 6, 20632, 259, 1220, 1120, 1400, 49267, 947, 50984], "temperature": 0.0, "avg_logprob": -0.18638393562287092, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.24462890625, "words": null}, {"id": 99, "seek": 61716, "start": 606.12, "end": 612.2, "text": " non se ne noti la differenza. Non \u00e8 importante che il dato sia perfetto ma che sia sufficientemente", "tokens": [50984, 2107, 369, 408, 406, 72, 635, 743, 23691, 13, 8774, 4873, 9416, 947, 1930, 46971, 25176, 13826, 23778, 463, 947, 25176, 11563, 16288, 51288], "temperature": 0.0, "avg_logprob": -0.18638393562287092, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.24462890625, "words": null}, {"id": 100, "seek": 61716, "start": 612.2, "end": 617.1600000000001, "text": " fedele da impedire all'occhio o all'orecchio umano di avvertire la diminuzione di qualit\u00e0.", "tokens": [51288, 4636, 16884, 1120, 22584, 621, 439, 6, 905, 31033, 277, 439, 6, 418, 66, 31033, 1105, 3730, 1026, 1305, 3281, 621, 635, 15739, 3334, 5328, 1026, 4101, 12445, 13, 51536], "temperature": 0.0, "avg_logprob": -0.18638393562287092, "compression_ratio": 1.6666666666666667, "no_speech_prob": 0.24462890625, "words": null}, {"id": 101, "seek": 64448, "start": 617.68, "end": 624.56, "text": " E dunque nella compressione con perdita esiste questo concetto della qualit\u00e0 e cio\u00e8 una misura", "tokens": [50390, 462, 10234, 1077, 23878, 19355, 68, 416, 12611, 2786, 785, 8375, 10263, 1588, 23778, 11618, 4101, 12445, 308, 41827, 2002, 3346, 2991, 50734], "temperature": 0.0, "avg_logprob": -0.20450774969252866, "compression_ratio": 1.7467248908296944, "no_speech_prob": 0.062744140625, "words": null}, {"id": 102, "seek": 64448, "start": 624.56, "end": 631.56, "text": " che esprime la quantit\u00e0 di informazioni conservate in fase di compressione. In pratica se la qualit\u00e0", "tokens": [50734, 947, 785, 1424, 1312, 635, 4426, 12445, 1026, 1356, 27569, 9704, 473, 294, 33931, 1026, 19355, 68, 13, 682, 28844, 2262, 369, 635, 4101, 12445, 51084], "temperature": 0.0, "avg_logprob": -0.20450774969252866, "compression_ratio": 1.7467248908296944, "no_speech_prob": 0.062744140625, "words": null}, {"id": 103, "seek": 64448, "start": 631.56, "end": 638.4399999999999, "text": " del file \u00e8 alta allora l'algoritmo di compressione avr\u00e0 scartato pochi dati. Man mano che si spinge", "tokens": [51084, 1103, 3991, 4873, 26495, 44141, 287, 6, 20422, 50017, 3280, 1026, 19355, 68, 1305, 39212, 795, 446, 2513, 714, 8036, 1137, 72, 13, 2458, 18384, 947, 1511, 637, 8735, 51428], "temperature": 0.0, "avg_logprob": -0.20450774969252866, "compression_ratio": 1.7467248908296944, "no_speech_prob": 0.062744140625, "words": null}, {"id": 104, "seek": 64448, "start": 638.4399999999999, "end": 644.48, "text": " l'algoritmo a scartare pi\u00f9 informazioni si riduce la dimensione del file compresso ma a discapito", "tokens": [51428, 287, 6, 20422, 50017, 3280, 257, 795, 446, 543, 10589, 1356, 27569, 1511, 3973, 4176, 635, 10139, 68, 1103, 3991, 715, 29652, 463, 257, 717, 9485, 3528, 51730], "temperature": 0.0, "avg_logprob": -0.20450774969252866, "compression_ratio": 1.7467248908296944, "no_speech_prob": 0.062744140625, "words": null}, {"id": 105, "seek": 67076, "start": 644.48, "end": 651.32, "text": " della qualit\u00e0 dell'immagine o del suono. Ma come funziona dunque questo algoritmo di compressione?", "tokens": [50364, 11618, 4101, 12445, 19781, 6, 6753, 10260, 277, 1103, 459, 8957, 13, 4042, 808, 49345, 21758, 10234, 1077, 10263, 3501, 50017, 3280, 1026, 19355, 68, 30, 50706], "temperature": 0.0, "avg_logprob": -0.1695312491307656, "compression_ratio": 1.5823293172690762, "no_speech_prob": 0.09259033203125, "words": null}, {"id": 106, "seek": 67076, "start": 651.32, "end": 658.04, "text": " Per capirlo concentriamoci innanzitutto sulla lavorazione delle immagini. Le immagini vengono", "tokens": [50706, 3026, 1410, 347, 752, 5512, 470, 10502, 537, 7714, 3910, 270, 28698, 33625, 29241, 12928, 16485, 3397, 559, 3812, 13, 1456, 3397, 559, 3812, 371, 1501, 8957, 51042], "temperature": 0.0, "avg_logprob": -0.1695312491307656, "compression_ratio": 1.5823293172690762, "no_speech_prob": 0.09259033203125, "words": null}, {"id": 107, "seek": 67076, "start": 658.04, "end": 664.5600000000001, "text": " rappresentate in informatica come insiemi di pixel cio\u00e8 di piccolissimi quadrati colorati che messi", "tokens": [51042, 8125, 11662, 473, 294, 1356, 267, 2262, 808, 1028, 414, 3057, 1026, 19261, 41827, 1026, 13363, 8768, 891, 10121, 10787, 4481, 72, 2017, 6908, 947, 2082, 72, 51368], "temperature": 0.0, "avg_logprob": -0.1695312491307656, "compression_ratio": 1.5823293172690762, "no_speech_prob": 0.09259033203125, "words": null}, {"id": 108, "seek": 67076, "start": 664.5600000000001, "end": 670.76, "text": " uno di fianco all'altro vanno a comporre una foto o un disegno. In un normale televisore full hd ad", "tokens": [51368, 8526, 1026, 49513, 1291, 439, 6, 47484, 371, 13484, 257, 715, 284, 265, 2002, 19176, 277, 517, 717, 1146, 1771, 13, 682, 517, 43646, 40638, 418, 1577, 276, 67, 614, 51678], "temperature": 0.0, "avg_logprob": -0.1695312491307656, "compression_ratio": 1.5823293172690762, "no_speech_prob": 0.09259033203125, "words": null}, {"id": 109, "seek": 70040, "start": 670.8, "end": 678.84, "text": " esempio le immagini di film che stiamo guardando sono composte da 1920 colonne e 1080 righe di", "tokens": [50366, 33627, 476, 3397, 559, 3812, 1026, 2007, 947, 342, 7415, 6290, 1806, 9259, 20203, 68, 1120, 22003, 8255, 716, 308, 24547, 8329, 675, 1026, 50768], "temperature": 0.0, "avg_logprob": -0.18995948342813385, "compression_ratio": 1.5725806451612903, "no_speech_prob": 0.01032257080078125, "words": null}, {"id": 110, "seek": 70040, "start": 678.84, "end": 686.4399999999999, "text": " questi pixel. Abbiamo quindi in totale circa 2 milioni di pixel e cio\u00e8 2 megapixel. Sempre", "tokens": [50768, 29729, 19261, 13, 32673, 7415, 15727, 294, 1993, 1220, 45972, 568, 1962, 15273, 1026, 19261, 308, 41827, 568, 34733, 34599, 13, 49724, 51148], "temperature": 0.0, "avg_logprob": -0.18995948342813385, "compression_ratio": 1.5725806451612903, "no_speech_prob": 0.01032257080078125, "words": null}, {"id": 111, "seek": 70040, "start": 686.4399999999999, "end": 692.4399999999999, "text": " semplificando al massimo diciamo che la compressione di un'immagine del genere funziona pi\u00f9 o meno in", "tokens": [51148, 4361, 564, 1089, 1806, 419, 2758, 6934, 14285, 7415, 947, 635, 19355, 68, 1026, 517, 6, 6753, 10260, 1103, 41553, 49345, 21758, 10589, 277, 40236, 294, 51448], "temperature": 0.0, "avg_logprob": -0.18995948342813385, "compression_ratio": 1.5725806451612903, "no_speech_prob": 0.01032257080078125, "words": null}, {"id": 112, "seek": 70040, "start": 692.4399999999999, "end": 700.4, "text": " questo modo. Nel file compresso riportiamo i pixel del file di partenza prendendo una riga s\u00ec e una", "tokens": [51448, 10263, 16664, 13, 426, 338, 3991, 715, 29652, 12782, 477, 7415, 741, 19261, 1103, 3991, 1026, 644, 23691, 9866, 3999, 2002, 8329, 64, 49267, 308, 2002, 51846], "temperature": 0.0, "avg_logprob": -0.18995948342813385, "compression_ratio": 1.5725806451612903, "no_speech_prob": 0.01032257080078125, "words": null}, {"id": 113, "seek": 72508, "start": 700.52, "end": 706.84, "text": " no e contemporaneamente una colonna s\u00ec e una no. In pratica una volta finito avremmo escluso la met\u00e0", "tokens": [50370, 572, 308, 13046, 1929, 3439, 2002, 1173, 784, 49267, 308, 2002, 572, 13, 682, 28844, 2262, 2002, 18765, 962, 3528, 1305, 265, 2174, 78, 4721, 3063, 78, 635, 1131, 1467, 50686], "temperature": 0.0, "avg_logprob": -0.23105640959950674, "compression_ratio": 1.668122270742358, "no_speech_prob": 0.0006561279296875, "words": null}, {"id": 114, "seek": 72508, "start": 706.84, "end": 713.0, "text": " delle righe la met\u00e0 delle colonne e quindi i tre quarti dei pixel. Pixel che sono di fatto andati", "tokens": [50686, 16485, 8329, 675, 635, 1131, 1467, 16485, 8255, 716, 308, 15727, 741, 2192, 20837, 72, 13874, 19261, 13, 28323, 947, 9259, 1026, 23228, 293, 6908, 50994], "temperature": 0.0, "avg_logprob": -0.23105640959950674, "compression_ratio": 1.668122270742358, "no_speech_prob": 0.0006561279296875, "words": null}, {"id": 115, "seek": 72508, "start": 713.0, "end": 719.16, "text": " persi nella compressione e da qui il nome di compressione con perdita. Il file risultante", "tokens": [50994, 868, 72, 23878, 19355, 68, 308, 1120, 1956, 1930, 19003, 1026, 19355, 68, 416, 12611, 2786, 13, 4416, 3991, 2253, 723, 2879, 51302], "temperature": 0.0, "avg_logprob": -0.23105640959950674, "compression_ratio": 1.668122270742358, "no_speech_prob": 0.0006561279296875, "words": null}, {"id": 116, "seek": 72508, "start": 719.16, "end": 725.0799999999999, "text": " avr\u00e0 quindi una dimensione di un quarto dell'originale. Va da s\u00e9 che avendo perso il 75%", "tokens": [51302, 1305, 39212, 15727, 2002, 10139, 68, 1026, 517, 50109, 19781, 6, 20632, 259, 1220, 13, 16822, 1120, 7910, 947, 1305, 3999, 868, 78, 1930, 9562, 4, 51598], "temperature": 0.0, "avg_logprob": -0.23105640959950674, "compression_ratio": 1.668122270742358, "no_speech_prob": 0.0006561279296875, "words": null}, {"id": 117, "seek": 74956, "start": 725.08, "end": 730.8000000000001, "text": " delle informazioni se tentassimo di ripristinare il file originale otterremo un risultato abbastanza", "tokens": [50364, 16485, 1356, 27569, 369, 7054, 640, 6934, 1026, 12782, 12940, 259, 543, 1930, 3991, 4957, 1220, 4337, 391, 44172, 517, 2253, 723, 2513, 16903, 525, 20030, 50650], "temperature": 0.0, "avg_logprob": -0.20169151212097308, "compression_ratio": 1.625514403292181, "no_speech_prob": 0.2117919921875, "words": null}, {"id": 118, "seek": 74956, "start": 730.8000000000001, "end": 737.0, "text": " diverso. L'immagine probabilmente sarebbe comunque distinguibile ma non sarebbe affatto quella di", "tokens": [50650, 18558, 539, 13, 441, 6, 6753, 10260, 31959, 4082, 38706, 39042, 45736, 11365, 30898, 463, 2107, 38706, 39042, 2096, 37491, 32234, 1026, 50960], "temperature": 0.0, "avg_logprob": -0.20169151212097308, "compression_ratio": 1.625514403292181, "no_speech_prob": 0.2117919921875, "words": null}, {"id": 119, "seek": 74956, "start": 737.0, "end": 743.08, "text": " partenza. Ora la procedura che abbiamo descritto non \u00e8 quella reale ma un qualcosa di simile che", "tokens": [50960, 644, 23691, 13, 43672, 635, 6682, 2991, 947, 22815, 7471, 18579, 78, 2107, 4873, 32234, 957, 68, 463, 517, 42400, 1026, 1034, 794, 947, 51264], "temperature": 0.0, "avg_logprob": -0.20169151212097308, "compression_ratio": 1.625514403292181, "no_speech_prob": 0.2117919921875, "words": null}, {"id": 120, "seek": 74956, "start": 743.08, "end": 749.5600000000001, "text": " ci \u00e8 servito per comprendere il concetto di base. In un formato reale come ad esempio il jpeg che", "tokens": [51264, 6983, 4873, 1658, 3528, 680, 30765, 323, 1930, 1588, 23778, 1026, 3096, 13, 682, 517, 1254, 2513, 957, 68, 808, 614, 33627, 1930, 361, 494, 70, 947, 51588], "temperature": 0.0, "avg_logprob": -0.20169151212097308, "compression_ratio": 1.625514403292181, "no_speech_prob": 0.2117919921875, "words": null}, {"id": 121, "seek": 77448, "start": 749.5600000000001, "end": 755.44, "text": " anche se viene utilizzato direttamente dai software \u00e8 di fatto un formato compresso la", "tokens": [50364, 11585, 369, 19561, 40355, 2513, 1264, 6319, 3439, 38586, 4722, 4873, 1026, 23228, 517, 1254, 2513, 715, 29652, 635, 50658], "temperature": 0.0, "avg_logprob": -0.18121936683561288, "compression_ratio": 1.5897435897435896, "no_speech_prob": 0.2169189453125, "words": null}, {"id": 122, "seek": 77448, "start": 755.44, "end": 762.0400000000001, "text": " tecnica prevede comunque la perdita di pixel ma la scelta di quali informazioni scartare viene", "tokens": [50658, 20105, 2262, 659, 937, 68, 45736, 635, 12611, 2786, 1026, 19261, 463, 635, 795, 338, 1328, 1026, 4101, 72, 1356, 27569, 795, 446, 543, 19561, 50988], "temperature": 0.0, "avg_logprob": -0.18121936683561288, "compression_ratio": 1.5897435897435896, "no_speech_prob": 0.2169189453125, "words": null}, {"id": 123, "seek": 77448, "start": 762.0400000000001, "end": 767.8000000000001, "text": " effettuata in modo molto pi\u00f9 complesso. Non \u00e8 possibile illustrare in un podcast l'intero", "tokens": [50988, 1244, 42747, 3274, 294, 16664, 16394, 10589, 1209, 5557, 13, 8774, 4873, 50184, 8490, 35559, 294, 517, 7367, 287, 6, 5106, 78, 51276], "temperature": 0.0, "avg_logprob": -0.18121936683561288, "compression_ratio": 1.5897435897435896, "no_speech_prob": 0.2169189453125, "words": null}, {"id": 124, "seek": 77448, "start": 767.8000000000001, "end": 774.48, "text": " processo tuttavia possiamo dire che le porzioni di pixel su cui lavora l'algoritmo non sono righe", "tokens": [51276, 27939, 3672, 83, 23015, 44758, 1264, 947, 476, 1515, 89, 15273, 1026, 19261, 459, 22929, 20923, 3252, 287, 6, 20422, 50017, 3280, 2107, 9259, 8329, 675, 51610], "temperature": 0.0, "avg_logprob": -0.18121936683561288, "compression_ratio": 1.5897435897435896, "no_speech_prob": 0.2169189453125, "words": null}, {"id": 125, "seek": 80332, "start": 774.48, "end": 780.36, "text": " e colonne quanto piuttosto dei quadrati la cui dimensione aumenta o diminuisce in base al grado", "tokens": [50364, 308, 8255, 716, 17820, 3895, 13478, 22756, 13874, 10787, 4481, 72, 635, 22929, 10139, 68, 17128, 64, 277, 15739, 8479, 384, 294, 3096, 419, 677, 1573, 50658], "temperature": 0.0, "avg_logprob": -0.1695253732509183, "compression_ratio": 1.660649819494585, "no_speech_prob": 0.271484375, "words": null}, {"id": 126, "seek": 80332, "start": 780.36, "end": 786.24, "text": " di qualit\u00e0 che si vuole ottenere. Pi\u00f9 grandi saranno i quadrati esaminati minore sar\u00e0 la", "tokens": [50658, 1026, 4101, 12445, 947, 1511, 9732, 4812, 4337, 1147, 323, 13, 17741, 5035, 45155, 13782, 13484, 741, 10787, 4481, 72, 785, 7428, 6908, 923, 418, 41338, 635, 50952], "temperature": 0.0, "avg_logprob": -0.1695253732509183, "compression_ratio": 1.660649819494585, "no_speech_prob": 0.271484375, "words": null}, {"id": 127, "seek": 80332, "start": 786.24, "end": 792.44, "text": " qualit\u00e0 dell'immagine compressa. L'algoritmo infatti selezioner\u00e0 tra tutti i pixel del", "tokens": [50952, 4101, 12445, 19781, 6, 6753, 10260, 14778, 64, 13, 441, 6, 20422, 50017, 3280, 1536, 21515, 369, 20336, 313, 260, 1467, 944, 19822, 741, 19261, 1103, 51262], "temperature": 0.0, "avg_logprob": -0.1695253732509183, "compression_ratio": 1.660649819494585, "no_speech_prob": 0.271484375, "words": null}, {"id": 128, "seek": 80332, "start": 792.44, "end": 797.52, "text": " quadrato quelli il cui valore ritiene meno importante e semplicemente li eliminer\u00e0", "tokens": [51262, 10787, 43037, 631, 16320, 1930, 22929, 1323, 418, 11289, 10174, 40236, 9416, 308, 4361, 4770, 16288, 375, 7892, 260, 1467, 51516], "temperature": 0.0, "avg_logprob": -0.1695253732509183, "compression_ratio": 1.660649819494585, "no_speech_prob": 0.271484375, "words": null}, {"id": 129, "seek": 80332, "start": 797.52, "end": 803.32, "text": " durante la compressione. Da quanto abbiamo appena detto si pu\u00f2 quindi dedurre una cosa e cio\u00e8 che", "tokens": [51516, 14427, 635, 19355, 68, 13, 3933, 17820, 22815, 724, 4118, 41031, 1511, 26526, 15727, 4172, 374, 265, 2002, 10163, 308, 41827, 947, 51806], "temperature": 0.0, "avg_logprob": -0.1695253732509183, "compression_ratio": 1.660649819494585, "no_speech_prob": 0.271484375, "words": null}, {"id": 130, "seek": 82846, "start": 803.32, "end": 809.08, "text": " tutte le scene dei film e delle serie tv in cui l'esperto della scientifica utilizza un non", "tokens": [50364, 38632, 476, 4145, 13874, 2007, 308, 16485, 23030, 16364, 294, 22929, 287, 6, 34698, 1353, 11618, 8134, 64, 4976, 7176, 517, 2107, 50652], "temperature": 0.0, "avg_logprob": -0.2048437464237213, "compression_ratio": 1.645021645021645, "no_speech_prob": 0.00359344482421875, "words": null}, {"id": 131, "seek": 82846, "start": 809.08, "end": 814.4000000000001, "text": " meglio definito software per incrementare la risoluzione dell'immagine della telecamera", "tokens": [50652, 48911, 1561, 3528, 4722, 680, 26200, 543, 635, 2253, 401, 3334, 5328, 19781, 6, 6753, 10260, 11618, 4304, 31135, 50918], "temperature": 0.0, "avg_logprob": -0.2048437464237213, "compression_ratio": 1.645021645021645, "no_speech_prob": 0.00359344482421875, "words": null}, {"id": 132, "seek": 82846, "start": 814.4000000000001, "end": 821.32, "text": " o di una macchina fotografica... beh sono cavolate non \u00e8 possibile recuperare informazioni da file", "tokens": [50918, 277, 1026, 2002, 7912, 339, 1426, 15418, 664, 424, 1786, 64, 485, 1540, 9259, 13971, 48278, 2107, 4873, 50184, 25692, 543, 1356, 27569, 1120, 3991, 51264], "temperature": 0.0, "avg_logprob": -0.2048437464237213, "compression_ratio": 1.645021645021645, "no_speech_prob": 0.00359344482421875, "words": null}, {"id": 133, "seek": 82846, "start": 821.32, "end": 828.46, "text": " in cui le informazioni semplicemente non ci sono. Per concludere il discorso anche i file audio come", "tokens": [51264, 294, 22929, 476, 1356, 27569, 4361, 4770, 16288, 2107, 6983, 9259, 13, 3026, 9312, 323, 1930, 2983, 284, 539, 11585, 741, 3991, 6278, 808, 51621], "temperature": 0.0, "avg_logprob": -0.2048437464237213, "compression_ratio": 1.645021645021645, "no_speech_prob": 0.00359344482421875, "words": null}, {"id": 134, "seek": 85102, "start": 828.46, "end": 835.1, "text": " gli mp3 sono in effetti formati compressi e utilizzano la stessa logica del formato jpeg in", "tokens": [50364, 17161, 275, 79, 18, 9259, 294, 1244, 12495, 1254, 6908, 14778, 72, 308, 40355, 3730, 635, 342, 8391, 3565, 2262, 1103, 1254, 2513, 361, 494, 70, 294, 50696], "temperature": 0.0, "avg_logprob": -0.20256194311219292, "compression_ratio": 1.5869565217391304, "no_speech_prob": 0.10809326171875, "words": null}, {"id": 135, "seek": 85102, "start": 835.1, "end": 840.7, "text": " pratica suddividono l'audio in varie porzioni e ne eliminano le parti che ritengono non fondamentali.", "tokens": [50696, 28844, 2262, 3707, 67, 1843, 8957, 287, 6, 46069, 294, 1374, 414, 1515, 89, 15273, 308, 408, 7892, 3730, 476, 24408, 947, 11289, 1501, 8957, 2107, 9557, 2466, 5103, 13, 50976], "temperature": 0.0, "avg_logprob": -0.20256194311219292, "compression_ratio": 1.5869565217391304, "no_speech_prob": 0.10809326171875, "words": null}, {"id": 136, "seek": 85102, "start": 840.7, "end": 845.9000000000001, "text": " Anche in questo caso il risultato finale non sar\u00e0 identico all'originale ma sar\u00e0", "tokens": [50976, 1107, 1876, 294, 10263, 9666, 1930, 2253, 723, 2513, 23510, 2107, 41338, 2473, 2789, 439, 6, 20632, 259, 1220, 463, 41338, 51236], "temperature": 0.0, "avg_logprob": -0.20256194311219292, "compression_ratio": 1.5869565217391304, "no_speech_prob": 0.10809326171875, "words": null}, {"id": 137, "seek": 85102, "start": 845.9000000000001, "end": 851.02, "text": " sufficientemente simile da essere apprezzabile e occuper\u00e0 molto meno spazio in memoria.", "tokens": [51236, 11563, 16288, 1034, 794, 1120, 19799, 724, 265, 4313, 33288, 308, 2678, 12879, 1467, 16394, 40236, 637, 921, 1004, 294, 1334, 8172, 13, 51492], "temperature": 0.0, "avg_logprob": -0.20256194311219292, "compression_ratio": 1.5869565217391304, "no_speech_prob": 0.10809326171875, "words": null}, {"id": 138, "seek": 87886, "start": 851.02, "end": 860.74, "text": " E anche per oggi siamo giunti al termine dell'episodio. Io spero che questa nuova rubrica", "tokens": [50364, 462, 11585, 680, 34768, 33459, 1735, 2760, 72, 419, 1433, 533, 19781, 6, 595, 271, 378, 1004, 13, 19239, 24152, 78, 947, 16540, 3822, 27924, 5915, 15192, 50850], "temperature": 0.0, "avg_logprob": -0.1972489300956074, "compression_ratio": 1.6016597510373445, "no_speech_prob": 0.1094970703125, "words": null}, {"id": 139, "seek": 87886, "start": 860.74, "end": 867.02, "text": " vi piaccia perch\u00e9 ho in serbo molti altri episodi. Come al solito vi ringrazio per aver ascoltato fin", "tokens": [50850, 1932, 3895, 326, 2755, 14303, 1106, 294, 816, 1763, 10739, 72, 33707, 2927, 30727, 13, 2492, 419, 1404, 3528, 1932, 4875, 30695, 1004, 680, 18247, 15526, 4837, 2513, 962, 51164], "temperature": 0.0, "avg_logprob": -0.1972489300956074, "compression_ratio": 1.6016597510373445, "no_speech_prob": 0.1094970703125, "words": null}, {"id": 140, "seek": 87886, "start": 867.02, "end": 871.78, "text": " qui e vi chiedo di condividere il podcast e se vi va di unirvi al gruppo telegram che trovate", "tokens": [51164, 1956, 308, 1932, 417, 36035, 1026, 2224, 1843, 323, 1930, 7367, 308, 369, 1932, 2773, 1026, 517, 347, 4917, 419, 47477, 78, 4304, 1342, 947, 4495, 19083, 51402], "temperature": 0.0, "avg_logprob": -0.1972489300956074, "compression_ratio": 1.6016597510373445, "no_speech_prob": 0.1094970703125, "words": null}, {"id": 141, "seek": 87886, "start": 871.78, "end": 878.86, "text": " in descrizione. Vi ricordo che potete seguirmi su instagram e ascoltare il podcast sulle principali", "tokens": [51402, 294, 2189, 19706, 13, 6626, 21040, 23872, 947, 1847, 3498, 18584, 3057, 459, 22102, 308, 15526, 4837, 543, 1930, 7367, 459, 2447, 6959, 5103, 51756], "temperature": 0.0, "avg_logprob": -0.1972489300956074, "compression_ratio": 1.6016597510373445, "no_speech_prob": 0.1094970703125, "words": null}, {"id": 142, "seek": 89342, "start": 878.86, "end": 886.14, "text": " piattaforme tra cui ad esempio spotify google podcast itunes e anche alexa. Vi baster\u00e0 dire", "tokens": [50364, 3895, 18405, 44562, 944, 22929, 614, 33627, 4008, 2505, 20742, 7367, 309, 15001, 308, 11585, 257, 2021, 64, 13, 6626, 987, 391, 1467, 1264, 50728], "temperature": 0.0, "avg_logprob": -0.2394979459340455, "compression_ratio": 1.3424657534246576, "no_speech_prob": 0.10955810546875, "words": null}, {"id": 143, "seek": 89342, "start": 886.14, "end": 893.42, "text": " alexa apri pensieri in codice. E dunque per oggi \u00e8 tutto io vi saluto e vi do appuntamento al prossimo", "tokens": [50728, 257, 2021, 64, 1882, 470, 6099, 45980, 294, 17656, 573, 13, 462, 10234, 1077, 680, 34768, 4873, 23048, 19785, 1932, 1845, 8262, 308, 1932, 360, 724, 2760, 8824, 419, 48794, 6934, 51092], "temperature": 0.0, "avg_logprob": -0.2394979459340455, "compression_ratio": 1.3424657534246576, "no_speech_prob": 0.10955810546875, "words": null}], "language": "Italian"}