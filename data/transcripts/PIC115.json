{"text": " Dopo l'ultimo episodio di Snippet, quello sul problema del commesso viaggiatore, sono stato contattato da un ascoltatore del podcast, Elia, che mi ha fatto notare che ho dato un paio di informazioni sbagliate o incomplete. La mia conoscenza del problema infatti era un po' datata e le mie ricerche per scrivere l'episodio non hanno aiutato a colmare queste lacune. Elia invece ha scritto un paper su una variante molto pi\u00f9 complessa del TSP ed ha anche ideato una euristica, cio\u00e8 una procedura che esplora un numero limitato di possibili soluzioni per trovarne una il pi\u00f9 possibile vicino a quella ottima in modo molto rapido. In poche parole Elia \u00e8 molto pi\u00f9 ferrato di me sull'argomento e per questo motivo l'ho incastrato e gli ho chiesto di scrivere il testo per questo episodio in modo da approfondire il concetto di ottimizzazione e chiarire e correggere un po' di cose dette l'ultima volta. Lui molto gentilmente ha accettato ed il risultato di questa collaborazione \u00e8 lo snippet che stai per ascoltare. Un problema di ottimizzazione \u00e8 un tipo di problema matematico in cui si cerca di trovare il valore migliore, detto anche ottimo, di una funzione denominata obiettivo. Problemi di ottimizzazione sono ad esempio scegliere i prodotti con cui fare la spesa per la settimana, andando a riempire il nostro carrello spendendo il meno possibile, cercare di montare i pezzi di un macchinario industriale parallelizzando il pi\u00f9 possibile i vari step di montaggio, cercare la pi\u00f9 corta sequenza di istruzioni per scrivere un programma che effettui un calcolo ed anche trovare il percorso pi\u00f9 breve per attraversare un certo numero di citt\u00e0. Ebbene s\u00ec, il problema del commesso viaggiatore di cui abbiamo parlato nell'episodio precedente \u00e8 proprio un problema di ottimizzazione. La branca dell'informatica che si occupa di calcolare e affrontare sistematicamente questo tipo di problemi \u00e8 nota con il nome di ricerca operativa. Tale nome ha origine nel contesto delle operazioni militari durante la seconda guerra mondiale. In quel periodo infatti, matematici e ingegneri furono incaricati di sviluppare modelli matematici e metodi per aiutare a prendere decisioni operative complesse e migliorare cos\u00ec l'efficienza delle azioni militari. Dopo la guerra, poi, questi strumenti matematici e modelli di calcolo furono applicati con successo a molte altre aree dello sviluppo civile, come la produzione industriale, la logistica, la pianificazione di trasporti, la gestione delle risorse, la finanza, eccetera. I primi passi per descrivere correttamente un problema di ottimizzazione consistono nello scrivere una formula per decidere quanto buona o cattiva sia una possibile soluzione. Questa formula \u00e8 chiamata funzione obiettivo. Nell'esempio del commesso viaggiatore, la funzione obiettivo quantifica, data una particolare soluzione, la distanza totale percorsa per visitare una lista ordinata di citt\u00e0. Tale funzione \u00e8 quindi una sorta di bussola che permette a chi calcola le varie ottimizzazioni di capire se sta migliorando o peggiorando la soluzione individuata, in quanto lo scopo dell'ottimizzazione \u00e8 proprio quello di massimizzare o minimizzare la funzione obiettivo. In riferimento al TSPI, tanto per rimanere sempre sull'esempio del commesso viaggiatore, lo scopo \u00e8 infatti quello di minimizzare la distanza per attraversare le varie citt\u00e0, mentre ad esempio nel caso del montaggio del macchinario l'obiettivo sarebbe quello di massimizzare il numero di linee produttive che possono lavorare in parallelo. In tutto questo discorso sono poi presenti anche degli elementi chiamati vincoli, cio\u00e8 delle regole che descrivono determinate condizioni da rispettare per considerare valida una soluzione. Tornando ancora una volta al TSPI, una soluzione \u00e8 valida solo se visita tutte le citt\u00e0 nella lista, oppure nell'esempio del carrello della spesa da riempire, un vincolo potrebbe essere quello di totalizzare almeno un certo quantitativo di calorie da consumare in un giorno. Insomma, i vincoli sono delle direttive da rispettare per non imbrogliare nell'elaborazione e soprattutto per trovare una soluzione che sia sensata e utile allo scopo reale prefissato. Infine, l'ultimo elemento del problema \u00e8 rappresentato dalle variabili, ovvero le varie scelte che si possono compiere per trovare una soluzione. Nel TSPI le variabili potrebbero ad esempio essere un numero per ogni citt\u00e0 che rappresenta l'ordine di visita. Tutti questi che abbiamo descritto sono i vari elementi di base per la modellazione che permettono a matematici e informatici di rappresentare in maniera precisa e sintetica un problema di ottimizzazione. E partendo da tale modellazione si pu\u00f2 notare un fatto molto interessante e probabilmente controintuitivo. Cio\u00e8 esistono problemi per i quali \u00e8 molto complesso trovare una soluzione ma \u00e8 paradossalmente molto semplice verificare se una data soluzione \u00e8 corretta. Prendiamo ad esempio un insieme di numeri. Occorrono molti tentativi per trovarne tre che sommati diano come risultato un certo valore k, per\u00f2 una volta ottenuta una tripletta \u00e8 invece molto semplice verificare se essa rappresenta una soluzione corretta o meno. Questo tipo di asimmetria tra semplicit\u00e0 di verifica di una soluzione e complessit\u00e0 nel calcolarla tra le altre cose \u00e8 un elemento fondante di quella disciplina alla base della sicurezza informatica nota come criptografia. Ma tornando al nostro TSP, nello scorso episodio ho erroneamente detto che non saremo in grado di verificare la soluzione adottata dalle api per spostarsi di fiore in fiore perch\u00e9 per noi \u00e8 impossibile calcolare l'ottimo quando il numero di nodi \u00e8 troppo elevato. Beh in realt\u00e0 questo non \u00e8 vero. Tramite infatti un complesso e geniale metodo matematico chiamato algoritmo del simplesso \u00e8 possibile trasformare il TSP in uno dei problemi appena descritti per i quali verificare se sia ottenuta la risposta corretta \u00e8 un'operazione attuabile anche in un tempo relativamente contenuto. In secondo luogo poi sempre nello scorso episodio avevo detto che per trovare la soluzione del TSP \u00e8 necessario elencare tutti i possibili cammini. Ma anche questa affermazione si \u00e8 poi rivelata imprecisa. Infatti la realt\u00e0 \u00e8 che alcuni cammini possono essere scartati grazie a dei ragionamenti per assurdo e ci\u00f2 vuol dire che non \u00e8 necessario esplorare ogni volta tutte le possibilit\u00e0. Il nocciolo del ragionamento \u00e8 essenzialmente nella definizione un cammino ottimo \u00e8 composto da sottocammini ottimi. Il che nel concreto vuol dire che se sappiamo ad esempio che il cammino migliore per andare da Torino a Bari e partire dal Piemonte e attraversare le Milano Magna, le Marche, l'Abruzzo, il Molise e poi raggiungere la Puglia. Se volessimo aggiungere una tappa che attraversa ad esempio l'Umbria non dovremmo provare ogni combinazione possibile dei percorsi perch\u00e9 sapremmo che ad esempio il sottopercorso migliore per andare dalle Marche alla Puglia rimarrebbe sempre attraversare l'Abruzzo e il Molise. Questa tecnica prende il nome di programmazione dinamica e consiste sostanzialmente nel riutilizzare i sottopercorsi ottimi di una soluzione che gi\u00e0 avevamo calcolato in precedenza. Grazie per aver ascoltato Snippet, una rubrica di Pensieri in Codice. Scopri tanti altri contenuti sul sito pensieriincodice.it", "segments": [{"id": 1, "seek": 2944, "start": 0.0, "end": 5.36, "text": " Dopo l'ultimo episodio di Snippet, quello sul problema del commesso viaggiatore, sono", "tokens": [50364, 42657, 78, 287, 6, 723, 6934, 39200, 1004, 1026, 9264, 2488, 302, 11, 22813, 17603, 12395, 1103, 800, 5557, 1932, 559, 70, 7676, 418, 11, 9259, 50632], "temperature": 0.0, "avg_logprob": -0.19340034506537698, "compression_ratio": 1.6487455197132617, "no_speech_prob": 0.011322021484375, "words": null}, {"id": 2, "seek": 2944, "start": 5.36, "end": 10.72, "text": " stato contattato da un ascoltatore del podcast, Elia, che mi ha fatto notare che ho dato un", "tokens": [50632, 29657, 660, 1591, 2513, 1120, 517, 15526, 4837, 43148, 1103, 7367, 11, 2699, 654, 11, 947, 2752, 324, 23228, 406, 543, 947, 1106, 46971, 517, 50900], "temperature": 0.0, "avg_logprob": -0.19340034506537698, "compression_ratio": 1.6487455197132617, "no_speech_prob": 0.011322021484375, "words": null}, {"id": 3, "seek": 2944, "start": 10.72, "end": 13.6, "text": " paio di informazioni sbagliate o incomplete.", "tokens": [50900, 2502, 1004, 1026, 1356, 27569, 262, 17282, 2081, 473, 277, 31709, 13, 51044], "temperature": 0.0, "avg_logprob": -0.19340034506537698, "compression_ratio": 1.6487455197132617, "no_speech_prob": 0.011322021484375, "words": null}, {"id": 4, "seek": 2944, "start": 13.6, "end": 19.8, "text": " La mia conoscenza del problema infatti era un po' datata e le mie ricerche per scrivere", "tokens": [51044, 2369, 21290, 416, 10466, 23691, 1103, 12395, 1536, 21515, 4249, 517, 714, 6, 1137, 3274, 308, 476, 12597, 21040, 260, 1876, 680, 5545, 5887, 51354], "temperature": 0.0, "avg_logprob": -0.19340034506537698, "compression_ratio": 1.6487455197132617, "no_speech_prob": 0.011322021484375, "words": null}, {"id": 5, "seek": 2944, "start": 19.8, "end": 23.0, "text": " l'episodio non hanno aiutato a colmare queste lacune.", "tokens": [51354, 287, 6, 595, 271, 378, 1004, 2107, 26595, 9783, 325, 2513, 257, 1173, 15455, 35455, 28027, 2613, 13, 51514], "temperature": 0.0, "avg_logprob": -0.19340034506537698, "compression_ratio": 1.6487455197132617, "no_speech_prob": 0.011322021484375, "words": null}, {"id": 6, "seek": 2944, "start": 23.0, "end": 29.44, "text": " Elia invece ha scritto un paper su una variante molto pi\u00f9 complessa del TSP ed ha anche ideato", "tokens": [51514, 2699, 654, 36344, 324, 5918, 34924, 517, 3035, 459, 2002, 3034, 2879, 16394, 10589, 1209, 8391, 1103, 314, 27921, 1257, 324, 11585, 1153, 2513, 51836], "temperature": 0.0, "avg_logprob": -0.19340034506537698, "compression_ratio": 1.6487455197132617, "no_speech_prob": 0.011322021484375, "words": null}, {"id": 7, "seek": 5748, "start": 29.44, "end": 35.28, "text": " una euristica, cio\u00e8 una procedura che esplora un numero limitato di possibili soluzioni", "tokens": [50364, 2002, 308, 374, 468, 2262, 11, 41827, 2002, 6682, 2991, 947, 785, 564, 3252, 517, 46839, 4948, 2513, 1026, 1402, 897, 2312, 1404, 3334, 15273, 50656], "temperature": 0.0, "avg_logprob": -0.18885869349258533, "compression_ratio": 1.6704545454545454, "no_speech_prob": 0.048095703125, "words": null}, {"id": 8, "seek": 5748, "start": 35.28, "end": 40.84, "text": " per trovarne una il pi\u00f9 possibile vicino a quella ottima in modo molto rapido.", "tokens": [50656, 680, 4495, 8517, 716, 2002, 1930, 10589, 50184, 26031, 2982, 257, 32234, 42772, 4775, 294, 16664, 16394, 5099, 2925, 13, 50934], "temperature": 0.0, "avg_logprob": -0.18885869349258533, "compression_ratio": 1.6704545454545454, "no_speech_prob": 0.048095703125, "words": null}, {"id": 9, "seek": 5748, "start": 40.84, "end": 46.28, "text": " In poche parole Elia \u00e8 molto pi\u00f9 ferrato di me sull'argomento e per questo motivo", "tokens": [50934, 682, 714, 1876, 26783, 2699, 654, 4873, 16394, 10589, 7202, 43037, 1026, 385, 459, 285, 6, 289, 30851, 15467, 308, 680, 10263, 35804, 51206], "temperature": 0.0, "avg_logprob": -0.18885869349258533, "compression_ratio": 1.6704545454545454, "no_speech_prob": 0.048095703125, "words": null}, {"id": 10, "seek": 5748, "start": 46.28, "end": 52.14, "text": " l'ho incastrato e gli ho chiesto di scrivere il testo per questo episodio in modo da approfondire", "tokens": [51206, 287, 6, 1289, 834, 525, 43037, 308, 17161, 1106, 417, 6495, 78, 1026, 5545, 5887, 1930, 1500, 78, 680, 10263, 39200, 1004, 294, 16664, 1120, 2075, 69, 684, 621, 51499], "temperature": 0.0, "avg_logprob": -0.18885869349258533, "compression_ratio": 1.6704545454545454, "no_speech_prob": 0.048095703125, "words": null}, {"id": 11, "seek": 5748, "start": 52.14, "end": 56.480000000000004, "text": " il concetto di ottimizzazione e chiarire e correggere un po' di cose dette l'ultima", "tokens": [51499, 1930, 1588, 23778, 1026, 4337, 31208, 8072, 12928, 308, 47454, 621, 308, 29731, 1615, 323, 517, 714, 6, 1026, 30261, 47126, 287, 6, 723, 4775, 51716], "temperature": 0.0, "avg_logprob": -0.18885869349258533, "compression_ratio": 1.6704545454545454, "no_speech_prob": 0.048095703125, "words": null}, {"id": 12, "seek": 5748, "start": 56.480000000000004, "end": 57.480000000000004, "text": " volta.", "tokens": [51716, 18765, 13, 51766], "temperature": 0.0, "avg_logprob": -0.18885869349258533, "compression_ratio": 1.6704545454545454, "no_speech_prob": 0.048095703125, "words": null}, {"id": 13, "seek": 8748, "start": 57.52, "end": 64.2, "text": " Lui molto gentilmente ha accettato ed il risultato di questa collaborazione \u00e8 lo snippet che", "tokens": [50366, 441, 3077, 16394, 16108, 388, 4082, 324, 1317, 3093, 2513, 1257, 1930, 2253, 723, 2513, 1026, 16540, 5091, 12928, 4873, 450, 35623, 302, 947, 50700], "temperature": 0.0, "avg_logprob": -0.261935761405362, "compression_ratio": 1.1770833333333333, "no_speech_prob": 0.11895751953125, "words": null}, {"id": 14, "seek": 8748, "start": 64.2, "end": 65.44, "text": " stai per ascoltare.", "tokens": [50700, 342, 1301, 680, 15526, 4837, 543, 13, 50762], "temperature": 0.0, "avg_logprob": -0.261935761405362, "compression_ratio": 1.1770833333333333, "no_speech_prob": 0.11895751953125, "words": null}, {"id": 15, "seek": 11628, "start": 88.48, "end": 93.88000000000001, "text": " Un problema di ottimizzazione \u00e8 un tipo di problema matematico in cui si cerca di", "tokens": [50414, 1156, 12395, 1026, 4337, 31208, 8072, 12928, 4873, 517, 9746, 1026, 12395, 3803, 14911, 78, 294, 22929, 1511, 26770, 1026, 50684], "temperature": 0.0, "avg_logprob": -0.17435516097715922, "compression_ratio": 1.720472440944882, "no_speech_prob": 0.11907958984375, "words": null}, {"id": 16, "seek": 11628, "start": 93.88000000000001, "end": 100.04, "text": " trovare il valore migliore, detto anche ottimo, di una funzione denominata obiettivo.", "tokens": [50684, 35449, 543, 1930, 1323, 418, 6186, 2081, 418, 11, 41031, 11585, 42772, 6934, 11, 1026, 2002, 1019, 19706, 16244, 3274, 1111, 1684, 83, 6340, 13, 50992], "temperature": 0.0, "avg_logprob": -0.17435516097715922, "compression_ratio": 1.720472440944882, "no_speech_prob": 0.11907958984375, "words": null}, {"id": 17, "seek": 11628, "start": 100.04, "end": 105.88000000000001, "text": " Problemi di ottimizzazione sono ad esempio scegliere i prodotti con cui fare la spesa", "tokens": [50992, 11676, 72, 1026, 4337, 31208, 8072, 12928, 9259, 614, 33627, 262, 384, 41443, 323, 741, 15792, 37514, 416, 22929, 11994, 635, 637, 13708, 51284], "temperature": 0.0, "avg_logprob": -0.17435516097715922, "compression_ratio": 1.720472440944882, "no_speech_prob": 0.11907958984375, "words": null}, {"id": 18, "seek": 11628, "start": 105.88000000000001, "end": 111.32000000000001, "text": " per la settimana, andando a riempire il nostro carrello spendendo il meno possibile, cercare", "tokens": [51284, 680, 635, 5584, 36497, 11, 293, 1806, 257, 367, 414, 2455, 621, 1930, 35779, 30919, 1913, 3496, 3999, 1930, 40236, 50184, 11, 10146, 5685, 51556], "temperature": 0.0, "avg_logprob": -0.17435516097715922, "compression_ratio": 1.720472440944882, "no_speech_prob": 0.11907958984375, "words": null}, {"id": 19, "seek": 11628, "start": 111.32000000000001, "end": 116.28, "text": " di montare i pezzi di un macchinario industriale parallelizzando il pi\u00f9 possibile i vari", "tokens": [51556, 1026, 8143, 543, 741, 520, 89, 3992, 1026, 517, 7912, 32167, 4912, 49005, 1220, 8952, 8072, 1806, 1930, 10589, 50184, 741, 3034, 51804], "temperature": 0.0, "avg_logprob": -0.17435516097715922, "compression_ratio": 1.720472440944882, "no_speech_prob": 0.11907958984375, "words": null}, {"id": 20, "seek": 14288, "start": 116.28, "end": 122.0, "text": " step di montaggio, cercare la pi\u00f9 corta sequenza di istruzioni per scrivere un programma", "tokens": [50364, 1823, 1026, 8143, 30763, 11, 10146, 5685, 635, 10589, 11278, 64, 5123, 23691, 1026, 1418, 894, 89, 15273, 680, 5545, 5887, 517, 1461, 1696, 50650], "temperature": 0.0, "avg_logprob": -0.1840551108356536, "compression_ratio": 1.6030534351145038, "no_speech_prob": 0.300048828125, "words": null}, {"id": 21, "seek": 14288, "start": 122.0, "end": 127.76, "text": " che effettui un calcolo ed anche trovare il percorso pi\u00f9 breve per attraversare un certo", "tokens": [50650, 947, 1244, 42747, 72, 517, 2104, 46086, 1257, 11585, 35449, 543, 1930, 680, 19558, 539, 10589, 48517, 680, 951, 424, 840, 543, 517, 22261, 50938], "temperature": 0.0, "avg_logprob": -0.1840551108356536, "compression_ratio": 1.6030534351145038, "no_speech_prob": 0.300048828125, "words": null}, {"id": 22, "seek": 14288, "start": 127.76, "end": 129.0, "text": " numero di citt\u00e0.", "tokens": [50938, 46839, 1026, 269, 593, 1467, 13, 51000], "temperature": 0.0, "avg_logprob": -0.1840551108356536, "compression_ratio": 1.6030534351145038, "no_speech_prob": 0.300048828125, "words": null}, {"id": 23, "seek": 14288, "start": 129.0, "end": 134.68, "text": " Ebbene s\u00ec, il problema del commesso viaggiatore di cui abbiamo parlato nell'episodio precedente", "tokens": [51000, 462, 6692, 1450, 49267, 11, 1930, 12395, 1103, 800, 5557, 1932, 46893, 43148, 1026, 22929, 22815, 13734, 2513, 44666, 6, 595, 271, 378, 1004, 16969, 1576, 51284], "temperature": 0.0, "avg_logprob": -0.1840551108356536, "compression_ratio": 1.6030534351145038, "no_speech_prob": 0.300048828125, "words": null}, {"id": 24, "seek": 14288, "start": 134.68, "end": 137.16, "text": " \u00e8 proprio un problema di ottimizzazione.", "tokens": [51284, 4873, 28203, 517, 12395, 1026, 4337, 31208, 8072, 12928, 13, 51408], "temperature": 0.0, "avg_logprob": -0.1840551108356536, "compression_ratio": 1.6030534351145038, "no_speech_prob": 0.300048828125, "words": null}, {"id": 25, "seek": 14288, "start": 137.16, "end": 142.88, "text": " La branca dell'informatica che si occupa di calcolare e affrontare sistematicamente", "tokens": [51408, 2369, 12029, 496, 19781, 6, 37811, 267, 2262, 947, 1511, 8073, 64, 1026, 2104, 8768, 543, 308, 2096, 10001, 543, 10555, 14911, 3439, 51694], "temperature": 0.0, "avg_logprob": -0.1840551108356536, "compression_ratio": 1.6030534351145038, "no_speech_prob": 0.300048828125, "words": null}, {"id": 26, "seek": 16720, "start": 142.88, "end": 147.48, "text": " questo tipo di problemi \u00e8 nota con il nome di ricerca operativa.", "tokens": [50364, 10263, 9746, 1026, 1154, 72, 4873, 36192, 416, 1930, 19003, 1026, 21040, 36127, 2208, 18740, 13, 50594], "temperature": 0.0, "avg_logprob": -0.20884486527315207, "compression_ratio": 1.6391304347826088, "no_speech_prob": 0.63916015625, "words": null}, {"id": 27, "seek": 16720, "start": 147.48, "end": 154.04, "text": " Tale nome ha origine nel contesto delle operazioni militari durante la seconda guerra mondiale.", "tokens": [50594, 49846, 19003, 324, 2349, 533, 15373, 10287, 78, 16485, 2208, 27569, 19142, 3504, 14427, 635, 1150, 64, 27542, 17606, 25051, 13, 50922], "temperature": 0.0, "avg_logprob": -0.20884486527315207, "compression_ratio": 1.6391304347826088, "no_speech_prob": 0.63916015625, "words": null}, {"id": 28, "seek": 16720, "start": 154.04, "end": 160.48, "text": " In quel periodo infatti, matematici e ingegneri furono incaricati di sviluppare modelli matematici", "tokens": [50922, 682, 7178, 2896, 78, 1536, 21515, 11, 3803, 14911, 72, 308, 3957, 1146, 1193, 72, 2687, 8957, 23694, 299, 6908, 1026, 17342, 388, 10504, 543, 1072, 41129, 3803, 14911, 72, 51244], "temperature": 0.0, "avg_logprob": -0.20884486527315207, "compression_ratio": 1.6391304347826088, "no_speech_prob": 0.63916015625, "words": null}, {"id": 29, "seek": 16720, "start": 160.48, "end": 165.92, "text": " e metodi per aiutare a prendere decisioni operative complesse e migliorare cos\u00ec l'efficienza", "tokens": [51244, 308, 1131, 30727, 680, 9783, 325, 543, 257, 9866, 323, 3537, 72, 2208, 1166, 1209, 7357, 308, 6186, 75, 1973, 543, 23278, 287, 6, 68, 3341, 42331, 51516], "temperature": 0.0, "avg_logprob": -0.20884486527315207, "compression_ratio": 1.6391304347826088, "no_speech_prob": 0.63916015625, "words": null}, {"id": 30, "seek": 16720, "start": 165.92, "end": 167.2, "text": " delle azioni militari.", "tokens": [51516, 16485, 7883, 15273, 19142, 3504, 13, 51580], "temperature": 0.0, "avg_logprob": -0.20884486527315207, "compression_ratio": 1.6391304347826088, "no_speech_prob": 0.63916015625, "words": null}, {"id": 31, "seek": 19448, "start": 167.64000000000001, "end": 172.72000000000003, "text": " Dopo la guerra, poi, questi strumenti matematici e modelli di calcolo furono applicati con", "tokens": [50386, 42657, 78, 635, 27542, 11, 19260, 11, 29729, 1056, 2206, 72, 3803, 14911, 72, 308, 1072, 41129, 1026, 2104, 46086, 2687, 8957, 2580, 6908, 416, 50640], "temperature": 0.0, "avg_logprob": -0.20004735085548778, "compression_ratio": 1.6818181818181819, "no_speech_prob": 0.014495849609375, "words": null}, {"id": 32, "seek": 19448, "start": 172.72000000000003, "end": 177.72000000000003, "text": " successo a molte altre aree dello sviluppo civile, come la produzione industriale, la", "tokens": [50640, 2245, 78, 257, 8015, 975, 34983, 366, 68, 368, 1913, 17342, 388, 10504, 78, 13779, 794, 11, 808, 635, 1082, 19706, 49005, 1220, 11, 635, 50890], "temperature": 0.0, "avg_logprob": -0.20004735085548778, "compression_ratio": 1.6818181818181819, "no_speech_prob": 0.014495849609375, "words": null}, {"id": 33, "seek": 19448, "start": 177.72000000000003, "end": 183.24, "text": " logistica, la pianificazione di trasporti, la gestione delle risorse, la finanza, eccetera.", "tokens": [50890, 3565, 468, 2262, 11, 635, 32198, 1089, 12928, 1026, 22507, 2707, 72, 11, 635, 7219, 5328, 16485, 2253, 18699, 11, 635, 3682, 2394, 11, 29613, 20269, 13, 51166], "temperature": 0.0, "avg_logprob": -0.20004735085548778, "compression_ratio": 1.6818181818181819, "no_speech_prob": 0.014495849609375, "words": null}, {"id": 34, "seek": 19448, "start": 183.24, "end": 188.60000000000002, "text": " I primi passi per descrivere correttamente un problema di ottimizzazione consistono", "tokens": [51166, 286, 2886, 72, 1320, 72, 680, 2189, 5887, 1181, 14313, 3439, 517, 12395, 1026, 4337, 31208, 8072, 12928, 4603, 8957, 51434], "temperature": 0.0, "avg_logprob": -0.20004735085548778, "compression_ratio": 1.6818181818181819, "no_speech_prob": 0.014495849609375, "words": null}, {"id": 35, "seek": 19448, "start": 188.60000000000002, "end": 194.48000000000002, "text": " nello scrivere una formula per decidere quanto buona o cattiva sia una possibile soluzione.", "tokens": [51434, 408, 1913, 5545, 5887, 2002, 8513, 680, 21937, 323, 17820, 758, 4037, 277, 269, 1591, 5931, 25176, 2002, 50184, 1404, 3334, 5328, 13, 51728], "temperature": 0.0, "avg_logprob": -0.20004735085548778, "compression_ratio": 1.6818181818181819, "no_speech_prob": 0.014495849609375, "words": null}, {"id": 36, "seek": 22224, "start": 194.8, "end": 197.64000000000001, "text": " Questa formula \u00e8 chiamata funzione obiettivo.", "tokens": [50380, 2326, 7841, 8513, 4873, 417, 2918, 3274, 1019, 19706, 1111, 1684, 83, 6340, 13, 50522], "temperature": 0.0, "avg_logprob": -0.20145515221675844, "compression_ratio": 1.6437246963562753, "no_speech_prob": 0.0078125, "words": null}, {"id": 37, "seek": 22224, "start": 197.64000000000001, "end": 203.36, "text": " Nell'esempio del commesso viaggiatore, la funzione obiettivo quantifica, data una particolare", "tokens": [50522, 426, 898, 6, 279, 15970, 1004, 1103, 800, 5557, 1932, 46893, 43148, 11, 635, 1019, 19706, 1111, 1684, 83, 6340, 4426, 43377, 11, 1412, 2002, 1276, 43141, 50808], "temperature": 0.0, "avg_logprob": -0.20145515221675844, "compression_ratio": 1.6437246963562753, "no_speech_prob": 0.0078125, "words": null}, {"id": 38, "seek": 22224, "start": 203.36, "end": 209.64000000000001, "text": " soluzione, la distanza totale percorsa per visitare una lista ordinata di citt\u00e0.", "tokens": [50808, 1404, 3334, 5328, 11, 635, 1483, 20030, 1993, 1220, 680, 66, 38822, 680, 3441, 543, 2002, 27764, 25376, 3274, 1026, 269, 593, 1467, 13, 51122], "temperature": 0.0, "avg_logprob": -0.20145515221675844, "compression_ratio": 1.6437246963562753, "no_speech_prob": 0.0078125, "words": null}, {"id": 39, "seek": 22224, "start": 209.64000000000001, "end": 216.56000000000003, "text": " Tale funzione \u00e8 quindi una sorta di bussola che permette a chi calcola le varie ottimizzazioni", "tokens": [51122, 49846, 1019, 19706, 4873, 15727, 2002, 33425, 1026, 1255, 82, 4711, 947, 4784, 3007, 257, 13228, 2104, 66, 4711, 476, 1374, 414, 4337, 31208, 8072, 27569, 51468], "temperature": 0.0, "avg_logprob": -0.20145515221675844, "compression_ratio": 1.6437246963562753, "no_speech_prob": 0.0078125, "words": null}, {"id": 40, "seek": 22224, "start": 216.56000000000003, "end": 222.24, "text": " di capire se sta migliorando o peggiorando la soluzione individuata, in quanto lo scopo", "tokens": [51468, 1026, 1410, 621, 369, 11135, 6186, 75, 1973, 1806, 277, 520, 1615, 1973, 1806, 635, 1404, 3334, 5328, 2461, 84, 3274, 11, 294, 17820, 450, 795, 404, 78, 51752], "temperature": 0.0, "avg_logprob": -0.20145515221675844, "compression_ratio": 1.6437246963562753, "no_speech_prob": 0.0078125, "words": null}, {"id": 41, "seek": 24804, "start": 222.24, "end": 227.28, "text": " dell'ottimizzazione \u00e8 proprio quello di massimizzare o minimizzare la funzione obiettivo.", "tokens": [50364, 19781, 6, 1521, 332, 8072, 12928, 4873, 28203, 22813, 1026, 2758, 332, 8072, 543, 277, 4464, 8072, 543, 635, 1019, 19706, 1111, 1684, 83, 6340, 13, 50616], "temperature": 0.0, "avg_logprob": -0.18912036970809654, "compression_ratio": 1.7349397590361446, "no_speech_prob": 0.313232421875, "words": null}, {"id": 42, "seek": 24804, "start": 227.28, "end": 233.88, "text": " In riferimento al TSPI, tanto per rimanere sempre sull'esempio del commesso viaggiatore,", "tokens": [50616, 682, 367, 9361, 10030, 419, 314, 27921, 40, 11, 10331, 680, 15982, 282, 323, 9553, 459, 285, 6, 279, 15970, 1004, 1103, 800, 5557, 1932, 46893, 43148, 11, 50946], "temperature": 0.0, "avg_logprob": -0.18912036970809654, "compression_ratio": 1.7349397590361446, "no_speech_prob": 0.313232421875, "words": null}, {"id": 43, "seek": 24804, "start": 233.88, "end": 239.04000000000002, "text": " lo scopo \u00e8 infatti quello di minimizzare la distanza per attraversare le varie citt\u00e0,", "tokens": [50946, 450, 795, 404, 78, 4873, 1536, 21515, 22813, 1026, 4464, 8072, 543, 635, 1483, 20030, 680, 951, 424, 840, 543, 476, 1374, 414, 269, 593, 1467, 11, 51204], "temperature": 0.0, "avg_logprob": -0.18912036970809654, "compression_ratio": 1.7349397590361446, "no_speech_prob": 0.313232421875, "words": null}, {"id": 44, "seek": 24804, "start": 239.04000000000002, "end": 243.8, "text": " mentre ad esempio nel caso del montaggio del macchinario l'obiettivo sarebbe quello di", "tokens": [51204, 49601, 614, 33627, 15373, 9666, 1103, 8143, 30763, 1103, 7912, 32167, 4912, 287, 6, 996, 1684, 83, 6340, 38706, 39042, 22813, 1026, 51442], "temperature": 0.0, "avg_logprob": -0.18912036970809654, "compression_ratio": 1.7349397590361446, "no_speech_prob": 0.313232421875, "words": null}, {"id": 45, "seek": 24804, "start": 243.8, "end": 248.04000000000002, "text": " massimizzare il numero di linee produttive che possono lavorare in parallelo.", "tokens": [51442, 2758, 332, 8072, 543, 1930, 46839, 1026, 1622, 68, 15792, 13478, 488, 947, 43857, 29241, 543, 294, 8069, 10590, 13, 51654], "temperature": 0.0, "avg_logprob": -0.18912036970809654, "compression_ratio": 1.7349397590361446, "no_speech_prob": 0.313232421875, "words": null}, {"id": 46, "seek": 27736, "start": 248.48, "end": 254.16, "text": " In tutto questo discorso sono poi presenti anche degli elementi chiamati vincoli, cio\u00e8", "tokens": [50386, 682, 23048, 10263, 2983, 284, 539, 9259, 19260, 1974, 72, 11585, 32079, 4478, 72, 417, 2918, 6908, 371, 4647, 9384, 11, 41827, 50670], "temperature": 0.0, "avg_logprob": -0.2209012725430986, "compression_ratio": 1.6619217081850535, "no_speech_prob": 0.0094146728515625, "words": null}, {"id": 47, "seek": 27736, "start": 254.16, "end": 259.76, "text": " delle regole che descrivono determinate condizioni da rispettare per considerare valida una soluzione.", "tokens": [50670, 16485, 1121, 4812, 947, 2189, 85, 8957, 3618, 13923, 2224, 590, 15273, 1120, 2253, 79, 3093, 543, 680, 1949, 543, 1323, 2887, 2002, 1404, 3334, 5328, 13, 50950], "temperature": 0.0, "avg_logprob": -0.2209012725430986, "compression_ratio": 1.6619217081850535, "no_speech_prob": 0.0094146728515625, "words": null}, {"id": 48, "seek": 27736, "start": 259.76, "end": 267.36, "text": " Tornando ancora una volta al TSPI, una soluzione \u00e8 valida solo se visita tutte le citt\u00e0 nella", "tokens": [50950, 314, 1865, 1806, 30656, 2002, 18765, 419, 314, 27921, 40, 11, 2002, 1404, 3334, 5328, 4873, 1323, 2887, 6944, 369, 1452, 2786, 38632, 476, 269, 593, 1467, 23878, 51330], "temperature": 0.0, "avg_logprob": -0.2209012725430986, "compression_ratio": 1.6619217081850535, "no_speech_prob": 0.0094146728515625, "words": null}, {"id": 49, "seek": 27736, "start": 267.36, "end": 272.64, "text": " lista, oppure nell'esempio del carrello della spesa da riempire, un vincolo potrebbe essere", "tokens": [51330, 27764, 11, 1458, 540, 44666, 6, 279, 15970, 1004, 1103, 30919, 1913, 11618, 637, 13708, 1120, 367, 414, 2455, 621, 11, 517, 371, 4647, 7902, 1847, 39487, 19799, 51594], "temperature": 0.0, "avg_logprob": -0.2209012725430986, "compression_ratio": 1.6619217081850535, "no_speech_prob": 0.0094146728515625, "words": null}, {"id": 50, "seek": 27736, "start": 272.64, "end": 277.36, "text": " quello di totalizzare almeno un certo quantitativo di calorie da consumare in un giorno.", "tokens": [51594, 22813, 1026, 3217, 8072, 543, 419, 43232, 517, 22261, 4426, 14032, 6340, 1026, 35004, 1120, 3978, 543, 294, 517, 42202, 13, 51830], "temperature": 0.0, "avg_logprob": -0.2209012725430986, "compression_ratio": 1.6619217081850535, "no_speech_prob": 0.0094146728515625, "words": null}, {"id": 51, "seek": 30720, "start": 277.76, "end": 283.48, "text": " Insomma, i vincoli sono delle direttive da rispettare per non imbrogliare nell'elaborazione", "tokens": [50384, 9442, 30243, 11, 741, 371, 4647, 9384, 9259, 16485, 1264, 6319, 488, 1120, 2253, 79, 3093, 543, 680, 2107, 566, 65, 6675, 2081, 543, 44666, 6, 338, 3816, 12928, 50670], "temperature": 0.0, "avg_logprob": -0.17090517899085736, "compression_ratio": 1.6791044776119404, "no_speech_prob": 8.612871170043945e-05, "words": null}, {"id": 52, "seek": 30720, "start": 283.48, "end": 289.64, "text": " e soprattutto per trovare una soluzione che sia sensata e utile allo scopo reale prefissato.", "tokens": [50670, 308, 50002, 680, 35449, 543, 2002, 1404, 3334, 5328, 947, 25176, 2923, 3274, 308, 2839, 794, 439, 78, 795, 404, 78, 957, 68, 18417, 891, 2513, 13, 50978], "temperature": 0.0, "avg_logprob": -0.17090517899085736, "compression_ratio": 1.6791044776119404, "no_speech_prob": 8.612871170043945e-05, "words": null}, {"id": 53, "seek": 30720, "start": 289.64, "end": 296.48, "text": " Infine, l'ultimo elemento del problema \u00e8 rappresentato dalle variabili, ovvero le varie", "tokens": [50978, 11537, 533, 11, 287, 6, 723, 6934, 47961, 1103, 12395, 4873, 8125, 11662, 2513, 274, 11780, 3034, 455, 2312, 11, 14187, 39332, 476, 1374, 414, 51320], "temperature": 0.0, "avg_logprob": -0.17090517899085736, "compression_ratio": 1.6791044776119404, "no_speech_prob": 8.612871170043945e-05, "words": null}, {"id": 54, "seek": 30720, "start": 296.48, "end": 301.56, "text": " scelte che si possono compiere per trovare una soluzione. Nel TSPI le variabili potrebbero ad", "tokens": [51320, 795, 338, 975, 947, 1511, 43857, 715, 14412, 680, 35449, 543, 2002, 1404, 3334, 5328, 13, 426, 338, 314, 27921, 40, 476, 3034, 455, 2312, 1847, 22692, 46659, 614, 51574], "temperature": 0.0, "avg_logprob": -0.17090517899085736, "compression_ratio": 1.6791044776119404, "no_speech_prob": 8.612871170043945e-05, "words": null}, {"id": 55, "seek": 30720, "start": 301.56, "end": 307.2, "text": " esempio essere un numero per ogni citt\u00e0 che rappresenta l'ordine di visita. Tutti", "tokens": [51574, 33627, 19799, 517, 46839, 680, 33189, 269, 593, 1467, 947, 8125, 495, 8938, 287, 6, 765, 533, 1026, 1452, 2786, 13, 18392, 7317, 51856], "temperature": 0.0, "avg_logprob": -0.17090517899085736, "compression_ratio": 1.6791044776119404, "no_speech_prob": 8.612871170043945e-05, "words": null}, {"id": 56, "seek": 33652, "start": 307.2, "end": 311.96, "text": " questi che abbiamo descritto sono i vari elementi di base per la modellazione che", "tokens": [50364, 29729, 947, 22815, 7471, 18579, 78, 9259, 741, 3034, 4478, 72, 1026, 3096, 680, 635, 1072, 898, 12928, 947, 50602], "temperature": 0.0, "avg_logprob": -0.21443088994762763, "compression_ratio": 1.7237354085603114, "no_speech_prob": 0.003765106201171875, "words": null}, {"id": 57, "seek": 33652, "start": 311.96, "end": 316.47999999999996, "text": " permettono a matematici e informatici di rappresentare in maniera precisa e sintetica", "tokens": [50602, 20696, 1756, 78, 257, 3803, 14911, 72, 308, 1356, 2399, 72, 1026, 8125, 11662, 543, 294, 587, 10609, 18861, 308, 41259, 302, 2262, 50828], "temperature": 0.0, "avg_logprob": -0.21443088994762763, "compression_ratio": 1.7237354085603114, "no_speech_prob": 0.003765106201171875, "words": null}, {"id": 58, "seek": 33652, "start": 316.47999999999996, "end": 323.08, "text": " un problema di ottimizzazione. E partendo da tale modellazione si pu\u00f2 notare un fatto molto", "tokens": [50828, 517, 12395, 1026, 4337, 31208, 8072, 12928, 13, 462, 644, 3999, 1120, 17172, 1072, 898, 12928, 1511, 26526, 406, 543, 517, 23228, 16394, 51158], "temperature": 0.0, "avg_logprob": -0.21443088994762763, "compression_ratio": 1.7237354085603114, "no_speech_prob": 0.003765106201171875, "words": null}, {"id": 59, "seek": 33652, "start": 323.08, "end": 330.36, "text": " interessante e probabilmente controintuitivo. Cio\u00e8 esistono problemi per i quali \u00e8 molto", "tokens": [51158, 24372, 308, 31959, 4082, 1583, 686, 1983, 6340, 13, 383, 35983, 785, 468, 8957, 1154, 72, 680, 741, 4101, 72, 4873, 16394, 51522], "temperature": 0.0, "avg_logprob": -0.21443088994762763, "compression_ratio": 1.7237354085603114, "no_speech_prob": 0.003765106201171875, "words": null}, {"id": 60, "seek": 33652, "start": 330.36, "end": 336.52, "text": " complesso trovare una soluzione ma \u00e8 paradossalmente molto semplice verificare se una data", "tokens": [51522, 1209, 5557, 35449, 543, 2002, 1404, 3334, 5328, 463, 4873, 13480, 772, 304, 4082, 16394, 4361, 564, 573, 1306, 1089, 543, 369, 2002, 1412, 51830], "temperature": 0.0, "avg_logprob": -0.21443088994762763, "compression_ratio": 1.7237354085603114, "no_speech_prob": 0.003765106201171875, "words": null}, {"id": 61, "seek": 36580, "start": 336.52, "end": 341.79999999999995, "text": " soluzione \u00e8 corretta. Prendiamo ad esempio un insieme di numeri. Occorrono molti tentativi", "tokens": [50364, 1404, 3334, 5328, 4873, 1181, 1505, 1328, 13, 430, 4542, 7415, 614, 33627, 517, 1028, 44940, 1026, 7866, 72, 13, 26191, 284, 2044, 78, 10739, 72, 7054, 10662, 72, 50628], "temperature": 0.0, "avg_logprob": -0.20312500129575314, "compression_ratio": 1.713235294117647, "no_speech_prob": 0.01186370849609375, "words": null}, {"id": 62, "seek": 36580, "start": 341.79999999999995, "end": 349.2, "text": " per trovarne tre che sommati diano come risultato un certo valore k, per\u00f2 una volta ottenuta una", "tokens": [50628, 680, 4495, 8517, 716, 2192, 947, 41854, 6908, 274, 6254, 808, 2253, 723, 2513, 517, 22261, 1323, 418, 350, 11, 12673, 2002, 18765, 4337, 1147, 12093, 2002, 50998], "temperature": 0.0, "avg_logprob": -0.20312500129575314, "compression_ratio": 1.713235294117647, "no_speech_prob": 0.01186370849609375, "words": null}, {"id": 63, "seek": 36580, "start": 349.2, "end": 354.52, "text": " tripletta \u00e8 invece molto semplice verificare se essa rappresenta una soluzione corretta o", "tokens": [50998, 1376, 14657, 1328, 4873, 36344, 16394, 4361, 564, 573, 1306, 1089, 543, 369, 7208, 8125, 495, 8938, 2002, 1404, 3334, 5328, 1181, 1505, 1328, 277, 51264], "temperature": 0.0, "avg_logprob": -0.20312500129575314, "compression_ratio": 1.713235294117647, "no_speech_prob": 0.01186370849609375, "words": null}, {"id": 64, "seek": 36580, "start": 354.52, "end": 360.44, "text": " meno. Questo tipo di asimmetria tra semplicit\u00e0 di verifica di una soluzione e complessit\u00e0 nel", "tokens": [51264, 40236, 13, 38167, 9746, 1026, 382, 332, 5537, 4668, 944, 4361, 4770, 12445, 1026, 1306, 43377, 1026, 2002, 1404, 3334, 5328, 308, 1209, 442, 12445, 15373, 51560], "temperature": 0.0, "avg_logprob": -0.20312500129575314, "compression_ratio": 1.713235294117647, "no_speech_prob": 0.01186370849609375, "words": null}, {"id": 65, "seek": 36580, "start": 360.44, "end": 365.79999999999995, "text": " calcolarla tra le altre cose \u00e8 un elemento fondante di quella disciplina alla base della", "tokens": [51560, 2104, 8768, 34148, 944, 476, 34983, 30261, 4873, 517, 47961, 9557, 2879, 1026, 32234, 8644, 1426, 11591, 3096, 11618, 51828], "temperature": 0.0, "avg_logprob": -0.20312500129575314, "compression_ratio": 1.713235294117647, "no_speech_prob": 0.01186370849609375, "words": null}, {"id": 66, "seek": 39076, "start": 365.8, "end": 371.96000000000004, "text": " sicurezza informatica nota come criptografia. Ma tornando al nostro TSP, nello scorso episodio", "tokens": [50364, 33579, 540, 26786, 1356, 267, 2262, 36192, 808, 12815, 662, 19815, 654, 13, 4042, 10885, 1806, 419, 35779, 314, 27921, 11, 408, 1913, 38629, 539, 39200, 1004, 50672], "temperature": 0.0, "avg_logprob": -0.18973214461022064, "compression_ratio": 1.5137254901960784, "no_speech_prob": 0.0015010833740234375, "words": null}, {"id": 67, "seek": 39076, "start": 371.96000000000004, "end": 377.88, "text": " ho erroneamente detto che non saremo in grado di verificare la soluzione adottata dalle api per", "tokens": [50672, 1106, 1189, 26446, 3439, 41031, 947, 2107, 38706, 3280, 294, 677, 1573, 1026, 1306, 1089, 543, 635, 1404, 3334, 5328, 614, 1521, 3274, 274, 11780, 1882, 72, 680, 50968], "temperature": 0.0, "avg_logprob": -0.18973214461022064, "compression_ratio": 1.5137254901960784, "no_speech_prob": 0.0015010833740234375, "words": null}, {"id": 68, "seek": 39076, "start": 377.88, "end": 383.64, "text": " spostarsi di fiore in fiore perch\u00e9 per noi \u00e8 impossibile calcolare l'ottimo quando il numero", "tokens": [50968, 637, 555, 32742, 1026, 15848, 418, 294, 15848, 418, 14303, 680, 22447, 4873, 38802, 30898, 2104, 8768, 543, 287, 6, 1521, 6934, 7770, 1930, 46839, 51256], "temperature": 0.0, "avg_logprob": -0.18973214461022064, "compression_ratio": 1.5137254901960784, "no_speech_prob": 0.0015010833740234375, "words": null}, {"id": 69, "seek": 39076, "start": 383.64, "end": 390.76, "text": " di nodi \u00e8 troppo elevato. Beh in realt\u00e0 questo non \u00e8 vero. Tramite infatti un complesso e geniale", "tokens": [51256, 1026, 15224, 72, 4873, 4495, 27000, 7701, 2513, 13, 13068, 294, 47512, 10263, 2107, 4873, 1306, 78, 13, 1765, 335, 642, 1536, 21515, 517, 1209, 5557, 308, 1049, 25051, 51612], "temperature": 0.0, "avg_logprob": -0.18973214461022064, "compression_ratio": 1.5137254901960784, "no_speech_prob": 0.0015010833740234375, "words": null}, {"id": 70, "seek": 41604, "start": 390.76, "end": 398.28, "text": " metodo matematico chiamato algoritmo del simplesso \u00e8 possibile trasformare il TSP in uno dei problemi", "tokens": [50364, 1131, 17423, 3803, 14911, 78, 417, 2918, 2513, 3501, 50017, 3280, 1103, 1034, 79, 1832, 78, 4873, 50184, 22507, 837, 543, 1930, 314, 27921, 294, 8526, 13874, 1154, 72, 50740], "temperature": 0.0, "avg_logprob": -0.2097039407021121, "compression_ratio": 1.5661157024793388, "no_speech_prob": 0.1685791015625, "words": null}, {"id": 71, "seek": 41604, "start": 398.28, "end": 403.59999999999997, "text": " appena descritti per i quali verificare se sia ottenuta la risposta corretta \u00e8 un'operazione", "tokens": [50740, 724, 4118, 7471, 18579, 72, 680, 741, 4101, 72, 1306, 1089, 543, 369, 25176, 4337, 1147, 12093, 635, 2253, 79, 8638, 1181, 1505, 1328, 4873, 517, 6, 7192, 12928, 51006], "temperature": 0.0, "avg_logprob": -0.2097039407021121, "compression_ratio": 1.5661157024793388, "no_speech_prob": 0.1685791015625, "words": null}, {"id": 72, "seek": 41604, "start": 403.59999999999997, "end": 409.96, "text": " attuabile anche in un tempo relativamente contenuto. In secondo luogo poi sempre nello", "tokens": [51006, 951, 84, 33288, 11585, 294, 517, 8972, 21960, 3439, 21795, 8262, 13, 682, 41601, 10438, 23515, 19260, 9553, 408, 1913, 51324], "temperature": 0.0, "avg_logprob": -0.2097039407021121, "compression_ratio": 1.5661157024793388, "no_speech_prob": 0.1685791015625, "words": null}, {"id": 73, "seek": 41604, "start": 409.96, "end": 416.03999999999996, "text": " scorso episodio avevo detto che per trovare la soluzione del TSP \u00e8 necessario elencare tutti i", "tokens": [51324, 38629, 539, 39200, 1004, 3472, 3080, 41031, 947, 680, 35449, 543, 635, 1404, 3334, 5328, 1103, 314, 27921, 4873, 2688, 4912, 806, 268, 5685, 19822, 741, 51628], "temperature": 0.0, "avg_logprob": -0.2097039407021121, "compression_ratio": 1.5661157024793388, "no_speech_prob": 0.1685791015625, "words": null}, {"id": 74, "seek": 44192, "start": 416.04, "end": 422.88, "text": " possibili cammini. Ma anche questa affermazione si \u00e8 poi rivelata imprecisa. Infatti la realt\u00e0 \u00e8", "tokens": [50364, 1402, 897, 2312, 1945, 2367, 72, 13, 4042, 11585, 16540, 2096, 966, 12928, 1511, 4873, 19260, 367, 36504, 3274, 704, 13867, 3837, 13, 11537, 21515, 635, 47512, 4873, 50706], "temperature": 0.0, "avg_logprob": -0.1937756153648017, "compression_ratio": 1.6512605042016806, "no_speech_prob": 0.109619140625, "words": null}, {"id": 75, "seek": 44192, "start": 422.88, "end": 428.32000000000005, "text": " che alcuni cammini possono essere scartati grazie a dei ragionamenti per assurdo e ci\u00f2 vuol dire", "tokens": [50706, 947, 20005, 24307, 1945, 2367, 72, 43857, 19799, 795, 446, 6908, 1295, 3283, 257, 13874, 17539, 313, 2466, 72, 680, 1256, 374, 2595, 308, 6983, 4293, 9732, 401, 1264, 50978], "temperature": 0.0, "avg_logprob": -0.1937756153648017, "compression_ratio": 1.6512605042016806, "no_speech_prob": 0.109619140625, "words": null}, {"id": 76, "seek": 44192, "start": 428.32000000000005, "end": 434.76, "text": " che non \u00e8 necessario esplorare ogni volta tutte le possibilit\u00e0. Il nocciolo del ragionamento \u00e8", "tokens": [50978, 947, 2107, 4873, 2688, 4912, 785, 564, 284, 543, 33189, 18765, 38632, 476, 24145, 12445, 13, 4416, 572, 66, 537, 7902, 1103, 17539, 313, 8824, 4873, 51300], "temperature": 0.0, "avg_logprob": -0.1937756153648017, "compression_ratio": 1.6512605042016806, "no_speech_prob": 0.109619140625, "words": null}, {"id": 77, "seek": 44192, "start": 434.76, "end": 441.92, "text": " essenzialmente nella definizione un cammino ottimo \u00e8 composto da sottocammini ottimi. Il che nel", "tokens": [51300, 2097, 11368, 831, 4082, 23878, 1561, 35740, 517, 1945, 2367, 78, 42772, 6934, 4873, 20203, 78, 1120, 262, 1521, 905, 335, 2367, 72, 42772, 10121, 13, 4416, 947, 15373, 51658], "temperature": 0.0, "avg_logprob": -0.1937756153648017, "compression_ratio": 1.6512605042016806, "no_speech_prob": 0.109619140625, "words": null}, {"id": 78, "seek": 46692, "start": 441.92, "end": 448.12, "text": " concreto vuol dire che se sappiamo ad esempio che il cammino migliore per andare da Torino a Bari", "tokens": [50364, 1588, 47330, 9732, 401, 1264, 947, 369, 46938, 7415, 614, 33627, 947, 1930, 1945, 2367, 78, 6186, 2081, 418, 680, 42742, 1120, 7160, 2982, 257, 363, 3504, 50674], "temperature": 0.0, "avg_logprob": -0.182125, "compression_ratio": 1.606837606837607, "no_speech_prob": 0.447998046875, "words": null}, {"id": 79, "seek": 46692, "start": 448.12, "end": 454.28000000000003, "text": " e partire dal Piemonte e attraversare le Milano Magna, le Marche, l'Abruzzo, il Molise e poi", "tokens": [50674, 308, 644, 621, 11702, 430, 4907, 10219, 308, 951, 424, 840, 543, 476, 7036, 3730, 6395, 629, 11, 476, 6129, 68, 11, 287, 6, 32, 7294, 35130, 11, 1930, 28278, 908, 308, 19260, 50982], "temperature": 0.0, "avg_logprob": -0.182125, "compression_ratio": 1.606837606837607, "no_speech_prob": 0.447998046875, "words": null}, {"id": 80, "seek": 46692, "start": 454.28000000000003, "end": 460.88, "text": " raggiungere la Puglia. Se volessimo aggiungere una tappa che attraversa ad esempio l'Umbria non", "tokens": [50982, 17539, 7834, 1063, 323, 635, 430, 697, 14218, 13, 1100, 1996, 442, 6934, 42254, 1063, 323, 2002, 256, 25637, 947, 951, 424, 840, 64, 614, 33627, 287, 6, 52, 2504, 4668, 2107, 51312], "temperature": 0.0, "avg_logprob": -0.182125, "compression_ratio": 1.606837606837607, "no_speech_prob": 0.447998046875, "words": null}, {"id": 81, "seek": 46692, "start": 460.88, "end": 466.92, "text": " dovremmo provare ogni combinazione possibile dei percorsi perch\u00e9 sapremmo che ad esempio", "tokens": [51312, 30870, 265, 2174, 78, 1439, 543, 33189, 38514, 12928, 50184, 13874, 680, 66, 830, 72, 14303, 18985, 265, 2174, 78, 947, 614, 33627, 51614], "temperature": 0.0, "avg_logprob": -0.182125, "compression_ratio": 1.606837606837607, "no_speech_prob": 0.447998046875, "words": null}, {"id": 82, "seek": 49460, "start": 466.92, "end": 471.92, "text": " il sottopercorso migliore per andare dalle Marche alla Puglia rimarrebbe sempre attraversare", "tokens": [50364, 1930, 262, 1521, 7192, 19558, 539, 6186, 2081, 418, 680, 42742, 274, 11780, 6129, 68, 11591, 430, 697, 14218, 15982, 15531, 39042, 9553, 951, 424, 840, 543, 50614], "temperature": 0.0, "avg_logprob": -0.16187499713897704, "compression_ratio": 1.548780487804878, "no_speech_prob": 0.05029296875, "words": null}, {"id": 83, "seek": 49460, "start": 471.92, "end": 478.52000000000004, "text": " l'Abruzzo e il Molise. Questa tecnica prende il nome di programmazione dinamica e consiste", "tokens": [50614, 287, 6, 32, 7294, 35130, 308, 1930, 28278, 908, 13, 2326, 7841, 20105, 2262, 9866, 68, 1930, 19003, 1026, 37648, 12928, 3791, 335, 2262, 308, 49066, 50944], "temperature": 0.0, "avg_logprob": -0.16187499713897704, "compression_ratio": 1.548780487804878, "no_speech_prob": 0.05029296875, "words": null}, {"id": 84, "seek": 49460, "start": 478.52000000000004, "end": 485.56, "text": " sostanzialmente nel riutilizzare i sottopercorsi ottimi di una soluzione che gi\u00e0 avevamo calcolato", "tokens": [50944, 41585, 3910, 831, 4082, 15373, 19739, 20835, 8072, 543, 741, 262, 1521, 7192, 66, 830, 72, 42772, 10121, 1026, 2002, 1404, 3334, 5328, 947, 30469, 3472, 85, 10502, 2104, 8768, 2513, 51296], "temperature": 0.0, "avg_logprob": -0.16187499713897704, "compression_ratio": 1.548780487804878, "no_speech_prob": 0.05029296875, "words": null}, {"id": 85, "seek": 49460, "start": 485.56, "end": 494.6, "text": " in precedenza. Grazie per aver ascoltato Snippet, una rubrica di Pensieri in Codice. Scopri tanti", "tokens": [51296, 294, 16969, 23691, 13, 8985, 3283, 680, 18247, 15526, 4837, 2513, 9264, 2488, 302, 11, 2002, 5915, 15192, 1026, 45035, 45980, 294, 383, 378, 573, 13, 2747, 404, 470, 256, 11520, 51748], "temperature": 0.0, "avg_logprob": -0.16187499713897704, "compression_ratio": 1.548780487804878, "no_speech_prob": 0.05029296875, "words": null}, {"id": 86, "seek": 49986, "start": 494.6, "end": 498.04, "text": " altri contenuti sul sito pensieriincodice.it", "tokens": [50364, 33707, 21795, 29161, 17603, 1394, 78, 6099, 45980, 4647, 378, 573, 13, 270, 50536], "temperature": 0.0, "avg_logprob": -0.25878905318677425, "compression_ratio": 0.88, "no_speech_prob": 0.099365234375, "words": null}], "language": "Italian"}