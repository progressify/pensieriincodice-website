{"text": " Pensieri in codice. Idee dal mondo del software a cura di Valerio Galano. Salve a tutti e bentornati su Pensieri in codice. Oggi parliamo di bug. Viviamo in un'epoca nella quale ognuno di noi, chi pi\u00f9 chi meno, \u00e8 abituato ogni giorno ad avere a che fare con decine, centinaia o anche migliaia di software. Dagli smartphone ai computer, dagli elettrodomestici fino ai mezzi di trasporto, siamo tutti a contatto con dei software con i quali interagiamo pi\u00f9 o meno volontariamente. Alcuni di questi software funzionano meglio, altri funzionano un po' peggio, di alcuni non sappiamo neanche l'esistenza, mentre di altri abbiamo magari una conoscenza abbastanza approfondita. Ed \u00e8 per questo che a volte, o di tanto in tanto, o spesso, questo dipende dai casi, ci capita di incappare in errori o comportamenti strani di tali software che comunemente vengono definiti bug. Questa parola \u00e8 entrata ormai a far parte del nostro dizionario in maniera piuttosto stabile. Un'app va in crash? Allora c'\u00e8 un bug. Un programma non d\u00e0 il risultato che ci aspettiamo? Allora c'\u00e8 un bug. Quel sito non si visualizza nel modo corretto? E allora c'\u00e8 un bug. In ogni caso, l'idea che c'\u00e8 alla base del concetto di bug \u00e8 che se in un software qualcosa non funziona, qualcuno, probabilmente un programmatore, in qualche punto del processo di produzione ha commesso un errore. Ma in realt\u00e0 il concetto non \u00e8 cos\u00ec semplice e nell'episodio di oggi vorrei provare a spiegarvi il perch\u00e9. Prima di procedere per\u00f2 un piccolo avviso. Siccome ho ricevuto parecchi messaggi da ascoltatori che hanno difficolt\u00e0 a seguire Pensieri in Codice da Spotify, d'ora in poi prover\u00f2 a pubblicare sui vari social il link agli episodi su Spreaker, che in teoria non dovrebbe richiedere n\u00e9 login n\u00e9 altri passaggi fastidiosi. In ogni caso, il consiglio \u00e8 quello di evitare Spotify per ascoltare i podcast in generale. Questo perch\u00e9 Spotify si sta attrezzando da poco tempo per supportare i podcast e quindi manca di tante piccole funzionalit\u00e0 che in realt\u00e0 praticamente tutte le altre app implementano senza problemi. Pensieri in Codice lo trovate praticamente su tutte le piattaforme e tutte le app, quindi vi conviene utilizzare qualcosa anche di molto semplice tipo Google Podcast o Apple Podcast o l'app di Spreaker. Ma in ogni caso, se preferite, potete seguirmi su Twitter, su Telegram o su Instagram, trovate tutti i link in descrizione, e semplicemente cliccare sui link che pubblicher\u00f2 agli episodi di volta in volta. Ora per\u00f2 bando alle ciance e iniziamo con l'argomento di oggi. Come tutti sappiamo, i bug all'interno di un software sono qualcosa di molto fastidioso. Fanno perdere tempo, potenzialmente fanno perdere soldi, sono frustranti e in generale ci fanno sembrare che il software sia di cattiva qualit\u00e0. Non importa se si parla di un'app per smartphone o un programma per computer, non importa quanto l'abbiamo pagato, non importa quante funzionalit\u00e0 ha, quanto \u00e8 veloce o quanto \u00e8 semplice. Qualsiasi sia il software di cui stiamo parlando, \u00e8 possibile, anzi probabile, che in esso si annidi qualche bug. Ma visto che una volta scoperti, questi bug vengono puntualmente, o quasi sempre, fixati, corretti, perch\u00e9 non li si corregge semplicemente tutti prima del lancio di un software? O perch\u00e9 non si aspetta a lanciare finch\u00e9 tutti i bug sono stati corretti? Beh, la risposta breve \u00e8 che individuare e correggere tutti i bug \u00e8 cos\u00ec complesso da essere praticamente impossibile. Ma per capire come mai dobbiamo chiarire alcuni concetti, il primo dei quali \u00e8 cos'\u00e8 un bug e come \u00e8 fatto. Ora, a grandi linee cos'\u00e8 un bug lo sappiamo un po' tutti. In pratica stiamo parlando di un errore nel software da qualche parte che ne provoca dei comportamenti inaspettati. Ma quello che non tutti sanno \u00e8 che questi errori, questi bug, possono essere suddivisi principalmente in tre categorie distinte. La prima di queste categorie \u00e8 quella dei bug di sintassi, cio\u00e8 quegli errori commessi dal programmatore mentre sta scrivendo il codice del software. Si tratta di meri errori materiali nell'utilizzo del linguaggio, quindi ad esempio segni di punteggiatura mancanti o nomi di funzioni errate, utilizzo di variabili non dichiarate e cose del genere. Nel 2020 questo tipo di errori sono davvero complicati da commettere. Prima di tutto perch\u00e9 in caso ce ne fossero un software farebbe molta fatica ad essere eseguito o comunque soffrirebbe di malfunzionamenti piuttosto evidenti. Senza contare che qualsiasi sia il linguaggio utilizzato, un ambiente di sviluppo avanzato o un compilatore sono perfettamente in grado di individuare questo tipo di errori e persino suggerire la giusta soluzione allo sviluppatore. Decisamente pi\u00f9 complessa, invece, \u00e8 la seconda categoria di bug, che \u00e8 quella degli errori logici. In questo tipo di errori il codice risulta scritto correttamente e pertanto si esegue senza dare problemi. Tuttavia l'errore sta nel fatto che il programma non svolge correttamente il compito per il quale \u00e8 stato creato. Per fare un esempio particolarmente semplice immaginiamo di scrivere un piccolo programma che prenda in input il lato di un quadrato e debba calcolarne il perimetro. Si tratterebbe di un programma piuttosto banale che dovrebbe semplicemente prendere un numero e moltiplicarlo per 4. Ma se nello scrivere il codice commettessimo un mero errore di battitura e al posto del numero 4 scrivessimo il numero 5 o il numero 3, a quel punto il nostro programma moltiplicherebbe la lunghezza del lato per 5 o per 3. In un'istruzione del genere non c'\u00e8 nessun errore di sintassi, \u00e8 perfettamente lecito moltiplicare il valore di una variabile per 3 o per 5. Tuttavia il risultato del nostro calcolo sarebbe errato dal punto di vista logico, perch\u00e9 con il nostro programma buggato un quadrato con lato uguale a 5 risulterebbe avere un perimetro uguale a 25 o a 15, in ogni caso diverso dal risultato corretto, cio\u00e8 20. La terza e sicuramente pi\u00f9 infida categoria di bug \u00e8 quella degli errori di runtime. Questo tipo di errori si verifica solamente a volte, in presenza di determinate condizioni. In pratica si parla di codice che a volte funziona e a volte no, a seconda ad esempio dei dati che sta elaborando o della disponibilit\u00e0 o meno di risorse esterne delle quali ha bisogno per lavorare. Gli esempi pi\u00f9 classici che mi vengono in mente sono ad esempio il caso in cui ci si trova a fare una divisione per un valore 0, che \u00e8 un'operazione impossibile e spesso in molti linguaggi non \u00e8 gestita. Oppure un altro caso classico \u00e8 quello in cui il valore all'interno di una variabile cresce e viene incrementato fino al punto di superare il limite gestibile da quel tipo di variabile. O se vogliamo pensare a qualcosa di pi\u00f9 complesso, possiamo immaginare un programma che abbia bisogno di scrivere un file ma trovi l'unit\u00e0 bloccata in scrittura oppure il disco pieno. Anche in questo caso si parlerebbe di un errore di runtime. Ad ogni modo per\u00f2, come potreste ben immaginare, questo tipo di bug \u00e8 il pi\u00f9 complicato non tanto da risolvere, quanto piuttosto da individuare o addirittura da prevedere. Sottotitoli e revisione a cura di QTSS Ora, a prescindere da cosa possano immaginare i non addetti ai lavori, passatemi il termine, la guerra contro i bug per la maggior parte dei software coinvolge ogni giorno moltissime persone e varie figure professionali, le quali hanno anche a disposizione un gran numero di tecniche atte appunto a scovare i bug. Ovviamente in un podcast di pochi minuti non mi illudo neanche di poter scalfire la superficie di questo argomento, tuttavia vorrei che passasse almeno il concetto principale, e cio\u00e8 che nella maggior parte dei casi il problema di un bug non \u00e8 tanto come risolverlo, per quello una soluzione si trova, il problema in realt\u00e0 \u00e8 individuarlo. Ed \u00e8 proprio per perseguire questo obiettivo che nel corso degli anni sono state sviluppate varie tecniche sempre pi\u00f9 efficaci, che chi si occupa di sviluppo del software pu\u00f2 applicare in misura maggiore o minore a seconda delle risorse che ha a disposizione. Accade quindi che a valle della produzione di un certo codice ci siano figure specializzate come gli sviluppatori senior che ispezionano e revisionano il codice alla ricerca di eventuali problemi, o i tester che verificano le varie funzionalit\u00e0 di un programma alla ricerca di malfunzionamenti, o ancora gli stessi programmatori che spesso utilizzano gli unit tests per assicurarsi che determinate porzioni di codice funzionino sempre nel modo corretto. Esistono persino aziende specializzate nel fare audit per verificare la sicurezza o le performance di un certo software. Insomma, anche senza scendere nei dettagli, appare chiaro che viene fatto un lavoro notevole per la ricerca ed eliminazione dei bug. E allora, come mai alcuni di essi riescono comunque a sfuggire ai controlli ed arrivare agli utenti? Beh, le risposte a questa domanda sono principalmente due. La prima \u00e8 banale, ma vale la pena di ricordarla. E c'\u00e8 che i programmatori, i analisti, i tester e tutte le figure che lavorano allo sviluppo di un software non sono perfetti. E quindi, in realt\u00e0, non ha molto senso aspettarsi da loro un prodotto perfetto. Banalmente, un programmatore pu\u00f2 commettere un errore e, allo stesso modo, un tester pu\u00f2 commettere un errore nel fare il test o nel programmarlo, se si tratta di test automatici. E questo ci porta direttamente alla seconda motivazione per cui i bug riescono a superare tutti questi controlli. E cio\u00e8 che, tra tutti i prodotti dell'ingegno umano, il software \u00e8 uno dei pi\u00f9 complessi. Come abbiamo visto nel primo blocco, un bug si pu\u00f2 annidare in una semplice istruzione di moltiplicazione. E allora che dire di un software che \u00e8 composto da pi\u00f9 di 50.000 righe? O di 100.000? O di un milione di righe? Aspettarsi che qualcuno, leggendo un codice o lanciando dei test, possa essere in grado di individuare tutte le possibili esecuzioni di tale codice, in realt\u00e0 non \u00e8 poi cosa cos\u00ec sensata. In questo caso, un software va visto come un insieme di percorsi, ognuno dei quali \u00e8 frutto della combinazione di tutta una serie di valori, di eventi, di risorse, di interazione con gli utenti, eccetera. In una visione del genere, gi\u00e0 un piccolo software si compone di tantissimi percorsi. Immaginiamo quindi cosa potrebbe accadere al crasher di tale software. Per avere un ordine di grandezza, dobbiamo pensare che, all'interno di un programma, ogni volta che aggiungiamo una semplice istruzione IF, stiamo in linea generale raddoppiando la quantit\u00e0 di percorsi disponibili. Per non parlare, invece, se ad esempio inseriamo la possibilit\u00e0 di input da parte dell'utente. In un contesto del genere, pensare di avere un approccio a forza bruta, quindi pensare di poter coprire qualsiasi possibile test per scovare qualsiasi possibile bug, semplicemente non ha senso. Sarebbe necessario cos\u00ec tanto tempo da rendere impossibile la pubblicazione del software e quindi inutili gli stessi test. Quindi, nel mondo reale, l'approccio \u00e8 quello logico, cio\u00e8 si cerca di immaginare quali siano i potenziali problemi e di produrre la maggior quantit\u00e0 possibile di test inerenti ad essi, con la consapevolezza che esister\u00e0 sempre una certa probabilit\u00e0 che qualcosa sfuga. E siamo giunti al termine dell'episodio di oggi. Spero che l'argomento sia stato interessante, voi come al solito fatemi sapere cosa ne pensate nei commenti su Twitter, su Telegram, su Instagram o dove volete. Condividete il pi\u00f9 possibile questo episodio sui vostri social per far crescere la community, unitevi al gruppo Telegram Pensieri in Codice e non dimenticate che un informatico risolve problemi, a volte anche usando il computer. A presto!", "segments": [{"id": 1, "seek": 2300, "start": 0.0, "end": 10.0, "text": " Pensieri in codice. Idee dal mondo del software a cura di Valerio Galano.", "tokens": [50364, 45035, 45980, 294, 17656, 573, 13, 13090, 68, 11702, 40499, 1103, 4722, 257, 1262, 64, 1026, 7188, 260, 1004, 7336, 3730, 13, 50864], "temperature": 0.0, "avg_logprob": -0.3310319656549498, "compression_ratio": 1.28125, "no_speech_prob": 0.0093994140625, "words": null}, {"id": 2, "seek": 2300, "start": 20.0, "end": 23.0, "text": " Salve a tutti e bentornati su Pensieri in codice.", "tokens": [51364, 5996, 303, 257, 19822, 308, 14075, 1865, 6908, 459, 45035, 45980, 294, 17656, 573, 13, 51514], "temperature": 0.0, "avg_logprob": -0.3310319656549498, "compression_ratio": 1.28125, "no_speech_prob": 0.0093994140625, "words": null}, {"id": 3, "seek": 4900, "start": 23.0, "end": 30.0, "text": " Oggi parliamo di bug. Viviamo in un'epoca nella quale ognuno di noi, chi pi\u00f9 chi meno,", "tokens": [50364, 422, 22771, 971, 49926, 1026, 7426, 13, 28188, 7415, 294, 517, 6, 595, 24035, 23878, 421, 1220, 277, 4568, 12638, 1026, 22447, 11, 13228, 10589, 13228, 40236, 11, 50714], "temperature": 0.0, "avg_logprob": -0.15972221670327363, "compression_ratio": 1.5657894736842106, "no_speech_prob": 0.0222625732421875, "words": null}, {"id": 4, "seek": 4900, "start": 30.0, "end": 37.0, "text": " \u00e8 abituato ogni giorno ad avere a che fare con decine, centinaia o anche migliaia di software.", "tokens": [50714, 4873, 410, 6380, 2513, 33189, 42202, 614, 37914, 257, 947, 11994, 416, 979, 533, 11, 1489, 1426, 654, 277, 11585, 6186, 14218, 654, 1026, 4722, 13, 51064], "temperature": 0.0, "avg_logprob": -0.15972221670327363, "compression_ratio": 1.5657894736842106, "no_speech_prob": 0.0222625732421875, "words": null}, {"id": 5, "seek": 4900, "start": 37.0, "end": 43.0, "text": " Dagli smartphone ai computer, dagli elettrodomestici fino ai mezzi di trasporto,", "tokens": [51064, 41866, 2081, 13307, 9783, 3820, 11, 15460, 2081, 806, 3093, 340, 4121, 8326, 72, 42560, 9783, 28966, 3992, 1026, 22507, 2707, 78, 11, 51364], "temperature": 0.0, "avg_logprob": -0.15972221670327363, "compression_ratio": 1.5657894736842106, "no_speech_prob": 0.0222625732421875, "words": null}, {"id": 6, "seek": 4900, "start": 43.0, "end": 49.0, "text": " siamo tutti a contatto con dei software con i quali interagiamo pi\u00f9 o meno volontariamente.", "tokens": [51364, 33459, 19822, 257, 660, 37491, 416, 13874, 4722, 416, 741, 4101, 72, 728, 559, 7415, 10589, 277, 40236, 40005, 45149, 13, 51664], "temperature": 0.0, "avg_logprob": -0.15972221670327363, "compression_ratio": 1.5657894736842106, "no_speech_prob": 0.0222625732421875, "words": null}, {"id": 7, "seek": 7700, "start": 49.0, "end": 55.0, "text": " Alcuni di questi software funzionano meglio, altri funzionano un po' peggio,", "tokens": [50364, 967, 66, 24307, 1026, 29729, 4722, 49345, 313, 3730, 48911, 11, 33707, 49345, 313, 3730, 517, 714, 6, 520, 1615, 1004, 11, 50664], "temperature": 0.0, "avg_logprob": -0.1400908083997221, "compression_ratio": 1.6581196581196582, "no_speech_prob": 0.060943603515625, "words": null}, {"id": 8, "seek": 7700, "start": 55.0, "end": 62.0, "text": " di alcuni non sappiamo neanche l'esistenza, mentre di altri abbiamo magari una conoscenza abbastanza approfondita.", "tokens": [50664, 1026, 20005, 24307, 2107, 46938, 7415, 408, 22806, 287, 6, 279, 4821, 2394, 11, 49601, 1026, 33707, 22815, 49932, 2002, 416, 10466, 23691, 16903, 525, 20030, 2075, 69, 684, 2786, 13, 51014], "temperature": 0.0, "avg_logprob": -0.1400908083997221, "compression_ratio": 1.6581196581196582, "no_speech_prob": 0.060943603515625, "words": null}, {"id": 9, "seek": 7700, "start": 62.0, "end": 68.0, "text": " Ed \u00e8 per questo che a volte, o di tanto in tanto, o spesso, questo dipende dai casi,", "tokens": [51014, 3977, 4873, 680, 10263, 947, 257, 37801, 11, 277, 1026, 10331, 294, 10331, 11, 277, 637, 5557, 11, 10263, 10460, 5445, 38586, 22567, 11, 51314], "temperature": 0.0, "avg_logprob": -0.1400908083997221, "compression_ratio": 1.6581196581196582, "no_speech_prob": 0.060943603515625, "words": null}, {"id": 10, "seek": 7700, "start": 68.0, "end": 77.0, "text": " ci capita di incappare in errori o comportamenti strani di tali software che comunemente vengono definiti bug.", "tokens": [51314, 6983, 39727, 1026, 294, 496, 427, 543, 294, 6713, 72, 277, 25883, 2466, 72, 1056, 3782, 1026, 4023, 72, 4722, 947, 11040, 16288, 371, 1501, 8957, 1561, 8707, 7426, 13, 51764], "temperature": 0.0, "avg_logprob": -0.1400908083997221, "compression_ratio": 1.6581196581196582, "no_speech_prob": 0.060943603515625, "words": null}, {"id": 11, "seek": 10400, "start": 77.0, "end": 84.0, "text": " Questa parola \u00e8 entrata ormai a far parte del nostro dizionario in maniera piuttosto stabile.", "tokens": [50364, 2326, 7841, 971, 4711, 4873, 8041, 3274, 420, 76, 1301, 257, 1400, 6975, 1103, 35779, 12098, 313, 4912, 294, 587, 10609, 3895, 13478, 22756, 16343, 794, 13, 50714], "temperature": 0.0, "avg_logprob": -0.11779312015503876, "compression_ratio": 1.6134453781512605, "no_speech_prob": 0.00482940673828125, "words": null}, {"id": 12, "seek": 10400, "start": 84.0, "end": 87.0, "text": " Un'app va in crash? Allora c'\u00e8 un bug.", "tokens": [50714, 1156, 6, 1746, 2773, 294, 8252, 30, 1057, 3252, 269, 6, 1462, 517, 7426, 13, 50864], "temperature": 0.0, "avg_logprob": -0.11779312015503876, "compression_ratio": 1.6134453781512605, "no_speech_prob": 0.00482940673828125, "words": null}, {"id": 13, "seek": 10400, "start": 87.0, "end": 91.0, "text": " Un programma non d\u00e0 il risultato che ci aspettiamo? Allora c'\u00e8 un bug.", "tokens": [50864, 1156, 1461, 1696, 2107, 274, 1467, 1930, 2253, 723, 2513, 947, 6983, 16817, 3093, 7415, 30, 1057, 3252, 269, 6, 1462, 517, 7426, 13, 51064], "temperature": 0.0, "avg_logprob": -0.11779312015503876, "compression_ratio": 1.6134453781512605, "no_speech_prob": 0.00482940673828125, "words": null}, {"id": 14, "seek": 10400, "start": 91.0, "end": 96.0, "text": " Quel sito non si visualizza nel modo corretto? E allora c'\u00e8 un bug.", "tokens": [51064, 43521, 1394, 78, 2107, 1511, 5056, 7176, 15373, 16664, 1181, 1505, 1353, 30, 462, 44141, 269, 6, 1462, 517, 7426, 13, 51314], "temperature": 0.0, "avg_logprob": -0.11779312015503876, "compression_ratio": 1.6134453781512605, "no_speech_prob": 0.00482940673828125, "words": null}, {"id": 15, "seek": 10400, "start": 96.0, "end": 104.0, "text": " In ogni caso, l'idea che c'\u00e8 alla base del concetto di bug \u00e8 che se in un software qualcosa non funziona,", "tokens": [51314, 682, 33189, 9666, 11, 287, 6, 482, 64, 947, 269, 6, 1462, 11591, 3096, 1103, 1588, 23778, 1026, 7426, 4873, 947, 369, 294, 517, 4722, 42400, 2107, 49345, 21758, 11, 51714], "temperature": 0.0, "avg_logprob": -0.11779312015503876, "compression_ratio": 1.6134453781512605, "no_speech_prob": 0.00482940673828125, "words": null}, {"id": 16, "seek": 12900, "start": 104.0, "end": 111.0, "text": " qualcuno, probabilmente un programmatore, in qualche punto del processo di produzione ha commesso un errore.", "tokens": [50364, 32101, 12638, 11, 31959, 4082, 517, 1461, 15677, 418, 11, 294, 38737, 14326, 1103, 27939, 1026, 1082, 19706, 324, 800, 5557, 517, 45935, 265, 13, 50714], "temperature": 0.0, "avg_logprob": -0.13543971449927947, "compression_ratio": 1.4862745098039216, "no_speech_prob": 0.00530242919921875, "words": null}, {"id": 17, "seek": 12900, "start": 111.0, "end": 119.0, "text": " Ma in realt\u00e0 il concetto non \u00e8 cos\u00ec semplice e nell'episodio di oggi vorrei provare a spiegarvi il perch\u00e9.", "tokens": [50714, 4042, 294, 47512, 1930, 1588, 23778, 2107, 4873, 23278, 4361, 564, 573, 308, 44666, 6, 595, 271, 378, 1004, 1026, 34768, 4245, 10271, 1439, 543, 257, 637, 414, 2976, 4917, 1930, 14303, 13, 51114], "temperature": 0.0, "avg_logprob": -0.13543971449927947, "compression_ratio": 1.4862745098039216, "no_speech_prob": 0.00530242919921875, "words": null}, {"id": 18, "seek": 12900, "start": 119.0, "end": 125.0, "text": " Prima di procedere per\u00f2 un piccolo avviso. Siccome ho ricevuto parecchi messaggi da ascoltatori", "tokens": [51114, 2114, 4775, 1026, 6682, 323, 12673, 517, 13363, 46086, 1305, 4938, 78, 13, 39155, 1102, 1106, 5090, 85, 8262, 7448, 66, 8036, 2082, 46893, 1120, 15526, 4837, 39842, 51414], "temperature": 0.0, "avg_logprob": -0.13543971449927947, "compression_ratio": 1.4862745098039216, "no_speech_prob": 0.00530242919921875, "words": null}, {"id": 19, "seek": 12900, "start": 125.0, "end": 129.0, "text": " che hanno difficolt\u00e0 a seguire Pensieri in Codice da Spotify,", "tokens": [51414, 947, 26595, 2204, 4837, 1467, 257, 8878, 621, 45035, 45980, 294, 383, 378, 573, 1120, 29036, 11, 51614], "temperature": 0.0, "avg_logprob": -0.13543971449927947, "compression_ratio": 1.4862745098039216, "no_speech_prob": 0.00530242919921875, "words": null}, {"id": 20, "seek": 15300, "start": 129.0, "end": 135.0, "text": " d'ora in poi prover\u00f2 a pubblicare sui vari social il link agli episodi su Spreaker,", "tokens": [50364, 274, 6, 3252, 294, 19260, 447, 331, 4293, 257, 1535, 11489, 543, 459, 72, 3034, 2093, 1930, 2113, 623, 2081, 2927, 30727, 459, 1738, 265, 4003, 11, 50664], "temperature": 0.0, "avg_logprob": -0.15072600829480876, "compression_ratio": 1.4845814977973568, "no_speech_prob": 0.4912109375, "words": null}, {"id": 21, "seek": 15300, "start": 135.0, "end": 140.0, "text": " che in teoria non dovrebbe richiedere n\u00e9 login n\u00e9 altri passaggi fastidiosi.", "tokens": [50664, 947, 294, 535, 8172, 2107, 30870, 39487, 4593, 1091, 323, 7024, 24276, 7024, 33707, 1320, 46893, 2370, 327, 2717, 72, 13, 50914], "temperature": 0.0, "avg_logprob": -0.15072600829480876, "compression_ratio": 1.4845814977973568, "no_speech_prob": 0.4912109375, "words": null}, {"id": 22, "seek": 15300, "start": 140.0, "end": 147.0, "text": " In ogni caso, il consiglio \u00e8 quello di evitare Spotify per ascoltare i podcast in generale.", "tokens": [50914, 682, 33189, 9666, 11, 1930, 40233, 19987, 4873, 22813, 1026, 1073, 270, 543, 29036, 680, 15526, 4837, 543, 741, 7367, 294, 1337, 1220, 13, 51264], "temperature": 0.0, "avg_logprob": -0.15072600829480876, "compression_ratio": 1.4845814977973568, "no_speech_prob": 0.4912109375, "words": null}, {"id": 23, "seek": 15300, "start": 147.0, "end": 153.0, "text": " Questo perch\u00e9 Spotify si sta attrezzando da poco tempo per supportare i podcast", "tokens": [51264, 38167, 14303, 29036, 1511, 11135, 951, 265, 4313, 1806, 1120, 10639, 8972, 680, 1406, 543, 741, 7367, 51564], "temperature": 0.0, "avg_logprob": -0.15072600829480876, "compression_ratio": 1.4845814977973568, "no_speech_prob": 0.4912109375, "words": null}, {"id": 24, "seek": 17900, "start": 153.0, "end": 160.0, "text": " e quindi manca di tante piccole funzionalit\u00e0 che in realt\u00e0 praticamente tutte le altre app implementano senza problemi.", "tokens": [50364, 308, 15727, 587, 496, 1026, 256, 2879, 13363, 27247, 49345, 1966, 12445, 947, 294, 47512, 45734, 38632, 476, 34983, 724, 4445, 3730, 36208, 1154, 72, 13, 50714], "temperature": 0.0, "avg_logprob": -0.1533564778941649, "compression_ratio": 1.611764705882353, "no_speech_prob": 0.6630859375, "words": null}, {"id": 25, "seek": 17900, "start": 160.0, "end": 165.0, "text": " Pensieri in Codice lo trovate praticamente su tutte le piattaforme e tutte le app,", "tokens": [50714, 45035, 45980, 294, 383, 378, 573, 450, 4495, 19083, 45734, 459, 38632, 476, 3895, 18405, 44562, 308, 38632, 476, 724, 11, 50964], "temperature": 0.0, "avg_logprob": -0.1533564778941649, "compression_ratio": 1.611764705882353, "no_speech_prob": 0.6630859375, "words": null}, {"id": 26, "seek": 17900, "start": 165.0, "end": 173.0, "text": " quindi vi conviene utilizzare qualcosa anche di molto semplice tipo Google Podcast o Apple Podcast o l'app di Spreaker.", "tokens": [50964, 15727, 1932, 3754, 10174, 40355, 543, 42400, 11585, 1026, 16394, 4361, 564, 573, 9746, 3329, 29972, 277, 6373, 29972, 277, 287, 6, 1746, 1026, 1738, 265, 4003, 13, 51364], "temperature": 0.0, "avg_logprob": -0.1533564778941649, "compression_ratio": 1.611764705882353, "no_speech_prob": 0.6630859375, "words": null}, {"id": 27, "seek": 17900, "start": 173.0, "end": 179.0, "text": " Ma in ogni caso, se preferite, potete seguirmi su Twitter, su Telegram o su Instagram,", "tokens": [51364, 4042, 294, 33189, 9666, 11, 369, 4382, 642, 11, 1847, 3498, 18584, 3057, 459, 5794, 11, 459, 14889, 1342, 277, 459, 5281, 11, 51664], "temperature": 0.0, "avg_logprob": -0.1533564778941649, "compression_ratio": 1.611764705882353, "no_speech_prob": 0.6630859375, "words": null}, {"id": 28, "seek": 19100, "start": 179.0, "end": 186.0, "text": " trovate tutti i link in descrizione, e semplicemente cliccare sui link che pubblicher\u00f2 agli episodi di volta in volta.", "tokens": [50364, 4495, 19083, 19822, 741, 2113, 294, 2189, 19706, 11, 308, 4361, 4770, 16288, 33661, 5685, 459, 72, 2113, 947, 1535, 65, 25215, 4293, 623, 2081, 2927, 30727, 1026, 18765, 294, 18765, 13, 50714], "temperature": 0.0, "avg_logprob": -0.16621766804621138, "compression_ratio": 1.3357664233576643, "no_speech_prob": 0.08868408203125, "words": null}, {"id": 29, "seek": 19100, "start": 186.0, "end": 191.0, "text": " Ora per\u00f2 bando alle ciance e iniziamo con l'argomento di oggi.", "tokens": [50714, 43672, 12673, 272, 1806, 5430, 269, 6276, 308, 294, 590, 7415, 416, 287, 6, 289, 30851, 15467, 1026, 34768, 13, 50964], "temperature": 0.0, "avg_logprob": -0.16621766804621138, "compression_ratio": 1.3357664233576643, "no_speech_prob": 0.08868408203125, "words": null}, {"id": 30, "seek": 21800, "start": 191.0, "end": 212.0, "text": " Come tutti sappiamo, i bug all'interno di un software sono qualcosa di molto fastidioso.", "tokens": [50364, 2492, 19822, 46938, 7415, 11, 741, 7426, 439, 6, 5106, 1771, 1026, 517, 4722, 9259, 42400, 1026, 16394, 2370, 327, 23540, 13, 51414], "temperature": 0.0, "avg_logprob": -0.2026466788077841, "compression_ratio": 1.3416666666666666, "no_speech_prob": 0.07366943359375, "words": null}, {"id": 31, "seek": 21800, "start": 212.0, "end": 218.0, "text": " Fanno perdere tempo, potenzialmente fanno perdere soldi, sono frustranti", "tokens": [51414, 479, 13484, 12611, 323, 8972, 11, 1847, 11368, 831, 4082, 283, 13484, 12611, 323, 3718, 72, 11, 9259, 7454, 7541, 72, 51714], "temperature": 0.0, "avg_logprob": -0.2026466788077841, "compression_ratio": 1.3416666666666666, "no_speech_prob": 0.07366943359375, "words": null}, {"id": 32, "seek": 24500, "start": 218.0, "end": 224.0, "text": " e in generale ci fanno sembrare che il software sia di cattiva qualit\u00e0.", "tokens": [50364, 308, 294, 1337, 1220, 6983, 283, 13484, 20775, 35559, 947, 1930, 4722, 25176, 1026, 269, 1591, 5931, 4101, 12445, 13, 50664], "temperature": 0.0, "avg_logprob": -0.15485491071428573, "compression_ratio": 1.6651982378854626, "no_speech_prob": 0.2276611328125, "words": null}, {"id": 33, "seek": 24500, "start": 224.0, "end": 230.0, "text": " Non importa se si parla di un'app per smartphone o un programma per computer,", "tokens": [50664, 8774, 33218, 369, 1511, 971, 875, 1026, 517, 6, 1746, 680, 13307, 277, 517, 1461, 1696, 680, 3820, 11, 50964], "temperature": 0.0, "avg_logprob": -0.15485491071428573, "compression_ratio": 1.6651982378854626, "no_speech_prob": 0.2276611328125, "words": null}, {"id": 34, "seek": 24500, "start": 230.0, "end": 237.0, "text": " non importa quanto l'abbiamo pagato, non importa quante funzionalit\u00e0 ha, quanto \u00e8 veloce o quanto \u00e8 semplice.", "tokens": [50964, 2107, 33218, 17820, 287, 6, 10797, 7415, 11812, 2513, 11, 2107, 33218, 421, 2879, 49345, 1966, 12445, 324, 11, 17820, 4873, 1241, 752, 384, 277, 17820, 4873, 4361, 564, 573, 13, 51314], "temperature": 0.0, "avg_logprob": -0.15485491071428573, "compression_ratio": 1.6651982378854626, "no_speech_prob": 0.2276611328125, "words": null}, {"id": 35, "seek": 24500, "start": 237.0, "end": 245.0, "text": " Qualsiasi sia il software di cui stiamo parlando, \u00e8 possibile, anzi probabile, che in esso si annidi qualche bug.", "tokens": [51314, 13616, 82, 4609, 72, 25176, 1930, 4722, 1026, 22929, 342, 7415, 971, 16201, 11, 4873, 50184, 11, 364, 3992, 1239, 33288, 11, 947, 294, 2097, 78, 1511, 2324, 12716, 38737, 7426, 13, 51714], "temperature": 0.0, "avg_logprob": -0.15485491071428573, "compression_ratio": 1.6651982378854626, "no_speech_prob": 0.2276611328125, "words": null}, {"id": 36, "seek": 27300, "start": 245.0, "end": 254.0, "text": " Ma visto che una volta scoperti, questi bug vengono puntualmente, o quasi sempre, fixati, corretti,", "tokens": [50364, 4042, 17558, 947, 2002, 18765, 795, 404, 911, 72, 11, 29729, 7426, 371, 1501, 8957, 18212, 901, 4082, 11, 277, 20954, 9553, 11, 3191, 6908, 11, 1181, 1505, 7317, 11, 50814], "temperature": 0.0, "avg_logprob": -0.18398085021757865, "compression_ratio": 1.6434782608695653, "no_speech_prob": 0.015899658203125, "words": null}, {"id": 37, "seek": 27300, "start": 254.0, "end": 259.0, "text": " perch\u00e9 non li si corregge semplicemente tutti prima del lancio di un software?", "tokens": [50814, 14303, 2107, 375, 1511, 29731, 1615, 68, 4361, 4770, 16288, 19822, 19507, 1103, 9326, 8529, 1026, 517, 4722, 30, 51064], "temperature": 0.0, "avg_logprob": -0.18398085021757865, "compression_ratio": 1.6434782608695653, "no_speech_prob": 0.015899658203125, "words": null}, {"id": 38, "seek": 27300, "start": 259.0, "end": 263.0, "text": " O perch\u00e9 non si aspetta a lanciare finch\u00e9 tutti i bug sono stati corretti?", "tokens": [51064, 422, 14303, 2107, 1511, 382, 7275, 1328, 257, 9326, 537, 543, 962, 11131, 19822, 741, 7426, 9259, 2219, 72, 1181, 1505, 7317, 30, 51264], "temperature": 0.0, "avg_logprob": -0.18398085021757865, "compression_ratio": 1.6434782608695653, "no_speech_prob": 0.015899658203125, "words": null}, {"id": 39, "seek": 27300, "start": 263.0, "end": 273.0, "text": " Beh, la risposta breve \u00e8 che individuare e correggere tutti i bug \u00e8 cos\u00ec complesso da essere praticamente impossibile.", "tokens": [51264, 13068, 11, 635, 2253, 79, 8638, 48517, 4873, 947, 2461, 84, 543, 308, 29731, 1615, 323, 19822, 741, 7426, 4873, 23278, 1209, 5557, 1120, 19799, 45734, 38802, 30898, 13, 51764], "temperature": 0.0, "avg_logprob": -0.18398085021757865, "compression_ratio": 1.6434782608695653, "no_speech_prob": 0.015899658203125, "words": null}, {"id": 40, "seek": 29400, "start": 273.0, "end": 281.0, "text": " Ma per capire come mai dobbiamo chiarire alcuni concetti, il primo dei quali \u00e8 cos'\u00e8 un bug e come \u00e8 fatto.", "tokens": [50364, 4042, 680, 1410, 621, 808, 12698, 360, 6692, 7415, 47454, 621, 20005, 24307, 1588, 12495, 11, 1930, 38671, 13874, 4101, 72, 4873, 3792, 6, 1462, 517, 7426, 308, 808, 4873, 23228, 13, 50764], "temperature": 0.0, "avg_logprob": -0.16370738517831673, "compression_ratio": 1.5052631578947369, "no_speech_prob": 0.0013666152954101562, "words": null}, {"id": 41, "seek": 29400, "start": 281.0, "end": 286.0, "text": " Ora, a grandi linee cos'\u00e8 un bug lo sappiamo un po' tutti.", "tokens": [50764, 43672, 11, 257, 45155, 1622, 68, 3792, 6, 1462, 517, 7426, 450, 46938, 7415, 517, 714, 6, 19822, 13, 51014], "temperature": 0.0, "avg_logprob": -0.16370738517831673, "compression_ratio": 1.5052631578947369, "no_speech_prob": 0.0013666152954101562, "words": null}, {"id": 42, "seek": 29400, "start": 286.0, "end": 294.0, "text": " In pratica stiamo parlando di un errore nel software da qualche parte che ne provoca dei comportamenti inaspettati.", "tokens": [51014, 682, 28844, 2262, 342, 7415, 971, 16201, 1026, 517, 45935, 265, 15373, 4722, 1120, 38737, 6975, 947, 408, 1439, 24035, 13874, 25883, 2466, 72, 294, 9375, 3093, 6908, 13, 51414], "temperature": 0.0, "avg_logprob": -0.16370738517831673, "compression_ratio": 1.5052631578947369, "no_speech_prob": 0.0013666152954101562, "words": null}, {"id": 43, "seek": 31500, "start": 294.0, "end": 304.0, "text": " Ma quello che non tutti sanno \u00e8 che questi errori, questi bug, possono essere suddivisi principalmente in tre categorie distinte.", "tokens": [50364, 4042, 22813, 947, 2107, 19822, 262, 13484, 4873, 947, 29729, 6713, 72, 11, 29729, 7426, 11, 43857, 19799, 3707, 67, 592, 8021, 32258, 294, 2192, 4847, 17473, 1483, 12401, 13, 50864], "temperature": 0.0, "avg_logprob": -0.1884501703284882, "compression_ratio": 1.5932203389830508, "no_speech_prob": 0.0826416015625, "words": null}, {"id": 44, "seek": 31500, "start": 305.0, "end": 315.0, "text": " La prima di queste categorie \u00e8 quella dei bug di sintassi, cio\u00e8 quegli errori commessi dal programmatore mentre sta scrivendo il codice del software.", "tokens": [50914, 2369, 19507, 1026, 35455, 4847, 17473, 4873, 32234, 13874, 7426, 1026, 41259, 640, 72, 11, 41827, 631, 41443, 6713, 72, 800, 442, 72, 11702, 1461, 15677, 418, 49601, 11135, 5545, 85, 3999, 1930, 17656, 573, 1103, 4722, 13, 51414], "temperature": 0.0, "avg_logprob": -0.1884501703284882, "compression_ratio": 1.5932203389830508, "no_speech_prob": 0.0826416015625, "words": null}, {"id": 45, "seek": 33500, "start": 315.0, "end": 329.0, "text": " Si tratta di meri errori materiali nell'utilizzo del linguaggio, quindi ad esempio segni di punteggiatura mancanti o nomi di funzioni errate, utilizzo di variabili non dichiarate e cose del genere.", "tokens": [50364, 4909, 504, 18405, 1026, 3551, 72, 6713, 72, 2527, 72, 44666, 6, 20835, 590, 4765, 1103, 21766, 30763, 11, 15727, 614, 33627, 3896, 3722, 1026, 4468, 975, 1615, 7676, 2991, 587, 66, 11520, 277, 5369, 72, 1026, 49345, 15273, 1189, 4404, 11, 19906, 4765, 1026, 3034, 455, 2312, 2107, 10390, 9448, 473, 308, 30261, 1103, 41553, 13, 51064], "temperature": 0.0, "avg_logprob": -0.16888503675107602, "compression_ratio": 1.5, "no_speech_prob": 0.320556640625, "words": null}, {"id": 46, "seek": 33500, "start": 329.0, "end": 335.0, "text": " Nel 2020 questo tipo di errori sono davvero complicati da commettere.", "tokens": [51064, 426, 338, 4808, 10263, 9746, 1026, 6713, 72, 9259, 11753, 39332, 16060, 6908, 1120, 800, 3093, 323, 13, 51364], "temperature": 0.0, "avg_logprob": -0.16888503675107602, "compression_ratio": 1.5, "no_speech_prob": 0.320556640625, "words": null}, {"id": 47, "seek": 36100, "start": 335.0, "end": 345.0, "text": " Prima di tutto perch\u00e9 in caso ce ne fossero un software farebbe molta fatica ad essere eseguito o comunque soffrirebbe di malfunzionamenti piuttosto evidenti.", "tokens": [50364, 2114, 4775, 1026, 23048, 14303, 294, 9666, 1769, 408, 14090, 2032, 517, 4722, 11994, 39042, 48564, 4046, 2262, 614, 19799, 785, 1146, 22703, 277, 45736, 370, 602, 470, 39487, 1026, 41318, 409, 89, 313, 2466, 72, 3895, 13478, 22756, 16371, 72, 13, 50864], "temperature": 0.0, "avg_logprob": -0.1415929266836791, "compression_ratio": 1.6024590163934427, "no_speech_prob": 0.29345703125, "words": null}, {"id": 48, "seek": 36100, "start": 345.0, "end": 361.0, "text": " Senza contare che qualsiasi sia il linguaggio utilizzato, un ambiente di sviluppo avanzato o un compilatore sono perfettamente in grado di individuare questo tipo di errori e persino suggerire la giusta soluzione allo sviluppatore.", "tokens": [50864, 3862, 2394, 660, 543, 947, 421, 1124, 4609, 72, 25176, 1930, 21766, 30763, 40355, 2513, 11, 517, 34957, 1026, 17342, 388, 10504, 78, 42444, 2513, 277, 517, 715, 388, 43148, 9259, 13826, 3093, 3439, 294, 677, 1573, 1026, 2461, 84, 543, 10263, 9746, 1026, 6713, 72, 308, 868, 2982, 22802, 1321, 621, 635, 1735, 28652, 1404, 3334, 5328, 439, 78, 17342, 388, 10504, 43148, 13, 51664], "temperature": 0.0, "avg_logprob": -0.1415929266836791, "compression_ratio": 1.6024590163934427, "no_speech_prob": 0.29345703125, "words": null}, {"id": 49, "seek": 38600, "start": 362.0, "end": 370.0, "text": " Decisamente pi\u00f9 complessa, invece, \u00e8 la seconda categoria di bug, che \u00e8 quella degli errori logici.", "tokens": [50414, 12427, 271, 3439, 10589, 1209, 8391, 11, 36344, 11, 4873, 635, 1150, 64, 4847, 8172, 1026, 7426, 11, 947, 4873, 32234, 32079, 6713, 72, 3565, 8787, 13, 50814], "temperature": 0.0, "avg_logprob": -0.13982780247318502, "compression_ratio": 1.542857142857143, "no_speech_prob": 0.01450347900390625, "words": null}, {"id": 50, "seek": 38600, "start": 370.0, "end": 378.0, "text": " In questo tipo di errori il codice risulta scritto correttamente e pertanto si esegue senza dare problemi.", "tokens": [50814, 682, 10263, 9746, 1026, 6713, 72, 1930, 17656, 573, 2253, 723, 64, 5918, 34924, 1181, 14313, 3439, 308, 13269, 5857, 1511, 785, 1146, 622, 36208, 8955, 1154, 72, 13, 51214], "temperature": 0.0, "avg_logprob": -0.13982780247318502, "compression_ratio": 1.542857142857143, "no_speech_prob": 0.01450347900390625, "words": null}, {"id": 51, "seek": 38600, "start": 378.0, "end": 386.0, "text": " Tuttavia l'errore sta nel fatto che il programma non svolge correttamente il compito per il quale \u00e8 stato creato.", "tokens": [51214, 314, 13478, 23015, 287, 6, 260, 340, 265, 11135, 15373, 23228, 947, 1930, 1461, 1696, 2107, 262, 9646, 432, 1181, 14313, 3439, 1930, 715, 3528, 680, 1930, 421, 1220, 4873, 29657, 1428, 78, 13, 51614], "temperature": 0.0, "avg_logprob": -0.13982780247318502, "compression_ratio": 1.542857142857143, "no_speech_prob": 0.01450347900390625, "words": null}, {"id": 52, "seek": 40400, "start": 386.0, "end": 397.0, "text": " Per fare un esempio particolarmente semplice immaginiamo di scrivere un piccolo programma che prenda in input il lato di un quadrato e debba calcolarne il perimetro.", "tokens": [50364, 3026, 11994, 517, 33627, 1276, 15276, 4082, 4361, 564, 573, 3397, 559, 259, 7415, 1026, 5545, 5887, 517, 13363, 46086, 1461, 1696, 947, 9866, 64, 294, 4846, 1930, 287, 2513, 1026, 517, 10787, 43037, 308, 3001, 4231, 2104, 8768, 289, 716, 1930, 680, 26123, 340, 13, 50914], "temperature": 0.0, "avg_logprob": -0.13188243958921658, "compression_ratio": 1.6395348837209303, "no_speech_prob": 0.209228515625, "words": null}, {"id": 53, "seek": 40400, "start": 397.0, "end": 404.0, "text": " Si tratterebbe di un programma piuttosto banale che dovrebbe semplicemente prendere un numero e moltiplicarlo per 4.", "tokens": [50914, 4909, 504, 1591, 323, 39042, 1026, 517, 1461, 1696, 3895, 13478, 22756, 5643, 1220, 947, 30870, 39487, 4361, 4770, 16288, 9866, 323, 517, 46839, 308, 10739, 72, 4770, 19457, 680, 1017, 13, 51264], "temperature": 0.0, "avg_logprob": -0.13188243958921658, "compression_ratio": 1.6395348837209303, "no_speech_prob": 0.209228515625, "words": null}, {"id": 54, "seek": 43000, "start": 405.0, "end": 421.0, "text": " Ma se nello scrivere il codice commettessimo un mero errore di battitura e al posto del numero 4 scrivessimo il numero 5 o il numero 3, a quel punto il nostro programma moltiplicherebbe la lunghezza del lato per 5 o per 3.", "tokens": [50414, 4042, 369, 408, 1913, 5545, 5887, 1930, 17656, 573, 800, 3093, 442, 6934, 517, 275, 2032, 45935, 265, 1026, 9591, 270, 2991, 308, 419, 2183, 78, 1103, 46839, 1017, 5545, 85, 442, 6934, 1930, 46839, 1025, 277, 1930, 46839, 805, 11, 257, 7178, 14326, 1930, 35779, 1461, 1696, 10739, 34442, 480, 323, 39042, 635, 16730, 675, 26786, 1103, 287, 2513, 680, 1025, 277, 680, 805, 13, 51214], "temperature": 0.0, "avg_logprob": -0.13133082089239154, "compression_ratio": 1.6515837104072397, "no_speech_prob": 0.2171630859375, "words": null}, {"id": 55, "seek": 43000, "start": 421.0, "end": 430.0, "text": " In un'istruzione del genere non c'\u00e8 nessun errore di sintassi, \u00e8 perfettamente lecito moltiplicare il valore di una variabile per 3 o per 5.", "tokens": [51214, 682, 517, 6, 468, 894, 19706, 1103, 41553, 2107, 269, 6, 1462, 39787, 409, 45935, 265, 1026, 41259, 640, 72, 11, 4873, 13826, 3093, 3439, 476, 32030, 10739, 72, 4770, 543, 1930, 1323, 418, 1026, 2002, 3034, 33288, 680, 805, 277, 680, 1025, 13, 51664], "temperature": 0.0, "avg_logprob": -0.13133082089239154, "compression_ratio": 1.6515837104072397, "no_speech_prob": 0.2171630859375, "words": null}, {"id": 56, "seek": 45100, "start": 430.0, "end": 451.0, "text": " Tuttavia il risultato del nostro calcolo sarebbe errato dal punto di vista logico, perch\u00e9 con il nostro programma buggato un quadrato con lato uguale a 5 risulterebbe avere un perimetro uguale a 25 o a 15, in ogni caso diverso dal risultato corretto, cio\u00e8 20.", "tokens": [50364, 314, 13478, 23015, 1930, 2253, 723, 2513, 1103, 35779, 2104, 46086, 38706, 39042, 45267, 2513, 11702, 14326, 1026, 22553, 3565, 2789, 11, 14303, 416, 1930, 35779, 1461, 1696, 7426, 70, 2513, 517, 10787, 43037, 416, 287, 2513, 10743, 901, 68, 257, 1025, 2253, 723, 323, 39042, 37914, 517, 680, 26123, 340, 10743, 901, 68, 257, 3552, 277, 257, 2119, 11, 294, 33189, 9666, 18558, 539, 11702, 2253, 723, 2513, 1181, 1505, 1353, 11, 41827, 945, 13, 51414], "temperature": 0.0, "avg_logprob": -0.1558593763038516, "compression_ratio": 1.535294117647059, "no_speech_prob": 0.035125732421875, "words": null}, {"id": 57, "seek": 46700, "start": 452.0, "end": 467.0, "text": " La terza e sicuramente pi\u00f9 infida categoria di bug \u00e8 quella degli errori di runtime. Questo tipo di errori si verifica solamente a volte, in presenza di determinate condizioni.", "tokens": [50414, 2369, 1796, 2394, 308, 33579, 374, 3439, 10589, 1536, 2887, 4847, 8172, 1026, 7426, 4873, 32234, 32079, 6713, 72, 1026, 34474, 13, 38167, 9746, 1026, 6713, 72, 1511, 1306, 43377, 27814, 257, 37801, 11, 294, 1183, 23691, 1026, 3618, 13923, 2224, 590, 15273, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1578776054084301, "compression_ratio": 1.3185185185185184, "no_speech_prob": 0.75341796875, "words": null}, {"id": 58, "seek": 48200, "start": 467.0, "end": 482.0, "text": " In pratica si parla di codice che a volte funziona e a volte no, a seconda ad esempio dei dati che sta elaborando o della disponibilit\u00e0 o meno di risorse esterne delle quali ha bisogno per lavorare.", "tokens": [50364, 682, 28844, 2262, 1511, 971, 875, 1026, 17656, 573, 947, 257, 37801, 49345, 21758, 308, 257, 37801, 572, 11, 257, 1150, 64, 614, 33627, 13874, 1137, 72, 947, 11135, 16298, 1806, 277, 11618, 23311, 11607, 12445, 277, 40236, 1026, 2253, 18699, 871, 48135, 16485, 4101, 72, 324, 40505, 1771, 680, 29241, 543, 13, 51114], "temperature": 0.0, "avg_logprob": -0.1729714975022433, "compression_ratio": 1.4113475177304964, "no_speech_prob": 0.96875, "words": null}, {"id": 59, "seek": 51000, "start": 483.0, "end": 496.0, "text": " Gli esempi pi\u00f9 classici che mi vengono in mente sono ad esempio il caso in cui ci si trova a fare una divisione per un valore 0, che \u00e8 un'operazione impossibile e spesso in molti linguaggi non \u00e8 gestita.", "tokens": [50414, 460, 2081, 32340, 72, 10589, 7230, 72, 947, 2752, 371, 1501, 8957, 294, 26577, 9259, 614, 33627, 1930, 9666, 294, 22929, 6983, 1511, 4495, 2757, 257, 11994, 2002, 10044, 68, 680, 517, 1323, 418, 1958, 11, 947, 4873, 517, 6, 7192, 12928, 38802, 30898, 308, 637, 5557, 294, 10739, 72, 21766, 46893, 2107, 4873, 7219, 2786, 13, 51064], "temperature": 0.0, "avg_logprob": -0.16579861180097968, "compression_ratio": 1.672340425531915, "no_speech_prob": 0.96728515625, "words": null}, {"id": 60, "seek": 51000, "start": 496.0, "end": 510.0, "text": " Oppure un altro caso classico \u00e8 quello in cui il valore all'interno di una variabile cresce e viene incrementato fino al punto di superare il limite gestibile da quel tipo di variabile.", "tokens": [51064, 15666, 540, 517, 40924, 9666, 1508, 2789, 4873, 22813, 294, 22929, 1930, 1323, 418, 439, 6, 5106, 1771, 1026, 2002, 3034, 33288, 20964, 384, 308, 19561, 26200, 2513, 42560, 419, 14326, 1026, 1687, 543, 1930, 39946, 7219, 30898, 1120, 7178, 9746, 1026, 3034, 33288, 13, 51764], "temperature": 0.0, "avg_logprob": -0.16579861180097968, "compression_ratio": 1.672340425531915, "no_speech_prob": 0.96728515625, "words": null}, {"id": 61, "seek": 54000, "start": 510.0, "end": 522.0, "text": " O se vogliamo pensare a qualcosa di pi\u00f9 complesso, possiamo immaginare un programma che abbia bisogno di scrivere un file ma trovi l'unit\u00e0 bloccata in scrittura oppure il disco pieno.", "tokens": [50364, 422, 369, 31273, 49926, 6099, 543, 257, 42400, 1026, 10589, 1209, 5557, 11, 44758, 3397, 559, 259, 543, 517, 1461, 1696, 947, 16903, 654, 40505, 1771, 1026, 5545, 5887, 517, 3991, 463, 4495, 4917, 287, 6, 409, 12445, 1749, 1914, 3274, 294, 5918, 593, 2991, 1458, 540, 1930, 3622, 26274, 78, 13, 50964], "temperature": 0.0, "avg_logprob": -0.14276713397233717, "compression_ratio": 1.6342412451361867, "no_speech_prob": 0.02593994140625, "words": null}, {"id": 62, "seek": 54000, "start": 522.0, "end": 526.0, "text": " Anche in questo caso si parlerebbe di un errore di runtime.", "tokens": [50964, 1107, 1876, 294, 10263, 9666, 1511, 13734, 323, 39042, 1026, 517, 45935, 265, 1026, 34474, 13, 51164], "temperature": 0.0, "avg_logprob": -0.14276713397233717, "compression_ratio": 1.6342412451361867, "no_speech_prob": 0.02593994140625, "words": null}, {"id": 63, "seek": 54000, "start": 526.0, "end": 539.0, "text": " Ad ogni modo per\u00f2, come potreste ben immaginare, questo tipo di bug \u00e8 il pi\u00f9 complicato non tanto da risolvere, quanto piuttosto da individuare o addirittura da prevedere.", "tokens": [51164, 1999, 33189, 16664, 12673, 11, 808, 1847, 265, 2941, 3271, 3397, 559, 259, 543, 11, 10263, 9746, 1026, 7426, 4873, 1930, 10589, 16060, 2513, 2107, 10331, 1120, 2253, 401, 5887, 11, 17820, 3895, 13478, 22756, 1120, 2461, 84, 543, 277, 909, 347, 593, 2991, 1120, 659, 937, 323, 13, 51814], "temperature": 0.0, "avg_logprob": -0.14276713397233717, "compression_ratio": 1.6342412451361867, "no_speech_prob": 0.02593994140625, "words": null}, {"id": 64, "seek": 56900, "start": 540.0, "end": 554.0, "text": " Sottotitoli e revisione a cura di QTSS", "tokens": [50364, 318, 1521, 310, 270, 9384, 308, 34218, 68, 257, 1262, 64, 1026, 1249, 7327, 50, 51064], "temperature": 0.0, "avg_logprob": -0.20609177366087708, "compression_ratio": 1.505813953488372, "no_speech_prob": 0.14013671875, "words": null}, {"id": 65, "seek": 56900, "start": 554.0, "end": 569.0, "text": " Ora, a prescindere da cosa possano immaginare i non addetti ai lavori, passatemi il termine, la guerra contro i bug per la maggior parte dei software coinvolge ogni giorno moltissime persone e varie figure professionali,", "tokens": [51064, 43672, 11, 257, 1183, 66, 471, 323, 1120, 10163, 1402, 3730, 3397, 559, 259, 543, 741, 2107, 909, 12495, 9783, 20923, 7386, 11, 1320, 267, 13372, 1930, 1433, 533, 11, 635, 27542, 1583, 741, 7426, 680, 635, 44639, 1973, 6975, 13874, 4722, 11464, 9646, 432, 33189, 42202, 10739, 891, 1312, 29944, 308, 1374, 414, 2573, 4843, 72, 11, 51814], "temperature": 0.0, "avg_logprob": -0.20609177366087708, "compression_ratio": 1.505813953488372, "no_speech_prob": 0.14013671875, "words": null}, {"id": 66, "seek": 59000, "start": 569.0, "end": 577.0, "text": " le quali hanno anche a disposizione un gran numero di tecniche atte appunto a scovare i bug.", "tokens": [50364, 476, 4101, 72, 26595, 11585, 257, 15885, 35740, 517, 9370, 46839, 1026, 20105, 9304, 951, 68, 724, 24052, 257, 795, 5179, 543, 741, 7426, 13, 50764], "temperature": 0.0, "avg_logprob": -0.17447916838603142, "compression_ratio": 1.5227272727272727, "no_speech_prob": 0.048828125, "words": null}, {"id": 67, "seek": 59000, "start": 577.0, "end": 590.0, "text": " Ovviamente in un podcast di pochi minuti non mi illudo neanche di poter scalfire la superficie di questo argomento, tuttavia vorrei che passasse almeno il concetto principale,", "tokens": [50764, 50005, 23347, 294, 517, 7367, 1026, 714, 8036, 13951, 72, 2107, 2752, 3171, 6207, 408, 22806, 1026, 1847, 260, 795, 1678, 621, 635, 23881, 414, 1026, 10263, 3882, 298, 15467, 11, 3672, 83, 23015, 4245, 10271, 947, 1320, 8604, 419, 43232, 1930, 1588, 23778, 6959, 1220, 11, 51414], "temperature": 0.0, "avg_logprob": -0.17447916838603142, "compression_ratio": 1.5227272727272727, "no_speech_prob": 0.048828125, "words": null}, {"id": 68, "seek": 61900, "start": 590.0, "end": 602.0, "text": " e cio\u00e8 che nella maggior parte dei casi il problema di un bug non \u00e8 tanto come risolverlo, per quello una soluzione si trova, il problema in realt\u00e0 \u00e8 individuarlo.", "tokens": [50364, 308, 41827, 947, 23878, 44639, 1973, 6975, 13874, 22567, 1930, 12395, 1026, 517, 7426, 2107, 4873, 10331, 808, 2253, 401, 331, 752, 11, 680, 22813, 2002, 1404, 3334, 5328, 1511, 4495, 2757, 11, 1930, 12395, 294, 47512, 4873, 2461, 20766, 752, 13, 50964], "temperature": 0.0, "avg_logprob": -0.17594537865213988, "compression_ratio": 1.6165413533834587, "no_speech_prob": 0.7802734375, "words": null}, {"id": 69, "seek": 61900, "start": 602.0, "end": 609.0, "text": " Ed \u00e8 proprio per perseguire questo obiettivo che nel corso degli anni sono state sviluppate varie tecniche sempre pi\u00f9 efficaci,", "tokens": [50964, 3977, 4873, 28203, 680, 20607, 2794, 621, 10263, 1111, 1684, 83, 6340, 947, 15373, 1181, 539, 32079, 31164, 9259, 1785, 17342, 388, 10504, 473, 1374, 414, 20105, 9304, 9553, 10589, 4703, 22086, 11, 51314], "temperature": 0.0, "avg_logprob": -0.17594537865213988, "compression_ratio": 1.6165413533834587, "no_speech_prob": 0.7802734375, "words": null}, {"id": 70, "seek": 61900, "start": 609.0, "end": 619.0, "text": " che chi si occupa di sviluppo del software pu\u00f2 applicare in misura maggiore o minore a seconda delle risorse che ha a disposizione.", "tokens": [51314, 947, 13228, 1511, 8073, 64, 1026, 17342, 388, 10504, 78, 1103, 4722, 26526, 2580, 543, 294, 3346, 2991, 463, 22771, 418, 277, 923, 418, 257, 1150, 64, 16485, 2253, 18699, 947, 324, 257, 15885, 35740, 13, 51814], "temperature": 0.0, "avg_logprob": -0.17594537865213988, "compression_ratio": 1.6165413533834587, "no_speech_prob": 0.7802734375, "words": null}, {"id": 71, "seek": 63900, "start": 619.0, "end": 633.0, "text": " Accade quindi che a valle della produzione di un certo codice ci siano figure specializzate come gli sviluppatori senior che ispezionano e revisionano il codice alla ricerca di eventuali problemi,", "tokens": [50364, 5725, 762, 15727, 947, 257, 40699, 11618, 1082, 19706, 1026, 517, 22261, 17656, 573, 6983, 262, 6254, 2573, 2121, 8072, 473, 808, 17161, 17342, 388, 10504, 39842, 7965, 947, 307, 15144, 313, 3730, 308, 34218, 3730, 1930, 17656, 573, 11591, 21040, 36127, 1026, 33160, 72, 1154, 72, 11, 51064], "temperature": 0.0, "avg_logprob": -0.14805639698738005, "compression_ratio": 1.620879120879121, "no_speech_prob": 0.0166473388671875, "words": null}, {"id": 72, "seek": 63900, "start": 633.0, "end": 639.0, "text": " o i tester che verificano le varie funzionalit\u00e0 di un programma alla ricerca di malfunzionamenti,", "tokens": [51064, 277, 741, 36101, 947, 1306, 1089, 3730, 476, 1374, 414, 49345, 1966, 12445, 1026, 517, 1461, 1696, 11591, 21040, 36127, 1026, 41318, 409, 89, 313, 2466, 72, 11, 51364], "temperature": 0.0, "avg_logprob": -0.14805639698738005, "compression_ratio": 1.620879120879121, "no_speech_prob": 0.0166473388671875, "words": null}, {"id": 73, "seek": 66600, "start": 640.0, "end": 650.0, "text": " o ancora gli stessi programmatori che spesso utilizzano gli unit tests per assicurarsi che determinate porzioni di codice funzionino sempre nel modo corretto.", "tokens": [50414, 277, 30656, 17161, 342, 442, 72, 1461, 15677, 7386, 947, 637, 5557, 40355, 3730, 17161, 4985, 6921, 680, 1256, 299, 374, 32742, 947, 3618, 13923, 1515, 89, 15273, 1026, 17656, 573, 49345, 313, 2982, 9553, 15373, 16664, 1181, 1505, 1353, 13, 50914], "temperature": 0.0, "avg_logprob": -0.15943030340481648, "compression_ratio": 1.6816326530612244, "no_speech_prob": 0.425537109375, "words": null}, {"id": 74, "seek": 66600, "start": 650.0, "end": 658.0, "text": " Esistono persino aziende specializzate nel fare audit per verificare la sicurezza o le performance di un certo software.", "tokens": [50914, 2313, 468, 8957, 868, 2982, 7883, 45816, 2121, 8072, 473, 15373, 11994, 17748, 680, 1306, 1089, 543, 635, 33579, 540, 26786, 277, 476, 3389, 1026, 517, 22261, 4722, 13, 51314], "temperature": 0.0, "avg_logprob": -0.15943030340481648, "compression_ratio": 1.6816326530612244, "no_speech_prob": 0.425537109375, "words": null}, {"id": 75, "seek": 66600, "start": 658.0, "end": 666.0, "text": " Insomma, anche senza scendere nei dettagli, appare chiaro che viene fatto un lavoro notevole per la ricerca ed eliminazione dei bug.", "tokens": [51314, 9442, 30243, 11, 11585, 36208, 795, 521, 323, 34517, 1141, 25030, 2081, 11, 724, 543, 47454, 78, 947, 19561, 23228, 517, 42060, 3637, 3080, 306, 680, 635, 21040, 36127, 1257, 7892, 12928, 13874, 7426, 13, 51714], "temperature": 0.0, "avg_logprob": -0.15943030340481648, "compression_ratio": 1.6816326530612244, "no_speech_prob": 0.425537109375, "words": null}, {"id": 76, "seek": 69000, "start": 666.0, "end": 673.0, "text": " E allora, come mai alcuni di essi riescono comunque a sfuggire ai controlli ed arrivare agli utenti?", "tokens": [50364, 462, 44141, 11, 808, 12698, 20005, 24307, 1026, 2097, 72, 23932, 45846, 45736, 257, 47095, 3562, 621, 9783, 1583, 16320, 1257, 30697, 543, 623, 2081, 2839, 23012, 30, 50714], "temperature": 0.0, "avg_logprob": -0.18629807104858068, "compression_ratio": 1.5022222222222221, "no_speech_prob": 0.0005702972412109375, "words": null}, {"id": 77, "seek": 69000, "start": 673.0, "end": 677.0, "text": " Beh, le risposte a questa domanda sono principalmente due.", "tokens": [50714, 13068, 11, 476, 2253, 23744, 68, 257, 16540, 3285, 5575, 9259, 32258, 3462, 13, 50914], "temperature": 0.0, "avg_logprob": -0.18629807104858068, "compression_ratio": 1.5022222222222221, "no_speech_prob": 0.0005702972412109375, "words": null}, {"id": 78, "seek": 69000, "start": 677.0, "end": 681.0, "text": " La prima \u00e8 banale, ma vale la pena di ricordarla.", "tokens": [50914, 2369, 19507, 4873, 5643, 1220, 11, 463, 15474, 635, 29222, 1026, 21040, 765, 34148, 13, 51114], "temperature": 0.0, "avg_logprob": -0.18629807104858068, "compression_ratio": 1.5022222222222221, "no_speech_prob": 0.0005702972412109375, "words": null}, {"id": 79, "seek": 69000, "start": 681.0, "end": 690.0, "text": " E c'\u00e8 che i programmatori, i analisti, i tester e tutte le figure che lavorano allo sviluppo di un software non sono perfetti.", "tokens": [51114, 462, 269, 6, 1462, 947, 741, 1461, 15677, 7386, 11, 741, 2624, 45308, 11, 741, 36101, 308, 38632, 476, 2573, 947, 29241, 3730, 439, 78, 17342, 388, 10504, 78, 1026, 517, 4722, 2107, 9259, 13826, 12495, 13, 51564], "temperature": 0.0, "avg_logprob": -0.18629807104858068, "compression_ratio": 1.5022222222222221, "no_speech_prob": 0.0005702972412109375, "words": null}, {"id": 80, "seek": 71600, "start": 690.0, "end": 696.0, "text": " E quindi, in realt\u00e0, non ha molto senso aspettarsi da loro un prodotto perfetto.", "tokens": [50364, 462, 15727, 11, 294, 47512, 11, 2107, 324, 16394, 3151, 539, 16817, 3093, 32742, 1120, 28810, 517, 15792, 18838, 13826, 23778, 13, 50664], "temperature": 0.0, "avg_logprob": -0.1543337310541351, "compression_ratio": 1.6755555555555555, "no_speech_prob": 0.057464599609375, "words": null}, {"id": 81, "seek": 71600, "start": 696.0, "end": 709.0, "text": " Banalmente, un programmatore pu\u00f2 commettere un errore e, allo stesso modo, un tester pu\u00f2 commettere un errore nel fare il test o nel programmarlo, se si tratta di test automatici.", "tokens": [50664, 13850, 304, 4082, 11, 517, 1461, 15677, 418, 26526, 800, 3093, 323, 517, 45935, 265, 308, 11, 439, 78, 44413, 16664, 11, 517, 36101, 26526, 800, 3093, 323, 517, 45935, 265, 15373, 11994, 1930, 1500, 277, 15373, 1461, 6209, 752, 11, 369, 1511, 504, 18405, 1026, 1500, 12509, 72, 13, 51314], "temperature": 0.0, "avg_logprob": -0.1543337310541351, "compression_ratio": 1.6755555555555555, "no_speech_prob": 0.057464599609375, "words": null}, {"id": 82, "seek": 71600, "start": 709.0, "end": 716.0, "text": " E questo ci porta direttamente alla seconda motivazione per cui i bug riescono a superare tutti questi controlli.", "tokens": [51314, 462, 10263, 6983, 28598, 1264, 6319, 3439, 11591, 1150, 64, 5426, 12928, 680, 22929, 741, 7426, 23932, 45846, 257, 1687, 543, 19822, 29729, 1583, 16320, 13, 51664], "temperature": 0.0, "avg_logprob": -0.1543337310541351, "compression_ratio": 1.6755555555555555, "no_speech_prob": 0.057464599609375, "words": null}, {"id": 83, "seek": 73800, "start": 716.0, "end": 724.0, "text": " E cio\u00e8 che, tra tutti i prodotti dell'ingegno umano, il software \u00e8 uno dei pi\u00f9 complessi.", "tokens": [50364, 462, 41827, 947, 11, 944, 19822, 741, 15792, 37514, 19781, 6, 278, 1146, 1771, 1105, 3730, 11, 1930, 4722, 4873, 8526, 13874, 10589, 1209, 442, 72, 13, 50764], "temperature": 0.0, "avg_logprob": -0.15269886273326297, "compression_ratio": 1.4952380952380953, "no_speech_prob": 0.00884246826171875, "words": null}, {"id": 84, "seek": 73800, "start": 724.0, "end": 730.0, "text": " Come abbiamo visto nel primo blocco, un bug si pu\u00f2 annidare in una semplice istruzione di moltiplicazione.", "tokens": [50764, 2492, 22815, 17558, 15373, 38671, 1749, 49552, 11, 517, 7426, 1511, 26526, 2324, 327, 543, 294, 2002, 4361, 564, 573, 1418, 894, 19706, 1026, 10739, 72, 4770, 12928, 13, 51064], "temperature": 0.0, "avg_logprob": -0.15269886273326297, "compression_ratio": 1.4952380952380953, "no_speech_prob": 0.00884246826171875, "words": null}, {"id": 85, "seek": 73800, "start": 730.0, "end": 738.0, "text": " E allora che dire di un software che \u00e8 composto da pi\u00f9 di 50.000 righe? O di 100.000? O di un milione di righe?", "tokens": [51064, 462, 44141, 947, 1264, 1026, 517, 4722, 947, 4873, 20203, 78, 1120, 10589, 1026, 2625, 13, 1360, 8329, 675, 30, 422, 1026, 2319, 13, 1360, 30, 422, 1026, 517, 1962, 5328, 1026, 8329, 675, 30, 51464], "temperature": 0.0, "avg_logprob": -0.15269886273326297, "compression_ratio": 1.4952380952380953, "no_speech_prob": 0.00884246826171875, "words": null}, {"id": 86, "seek": 76700, "start": 738.0, "end": 752.0, "text": " Aspettarsi che qualcuno, leggendo un codice o lanciando dei test, possa essere in grado di individuare tutte le possibili esecuzioni di tale codice, in realt\u00e0 non \u00e8 poi cosa cos\u00ec sensata.", "tokens": [50364, 1018, 79, 3093, 32742, 947, 32101, 12638, 11, 30991, 3999, 517, 17656, 573, 277, 9326, 537, 1806, 13874, 1500, 11, 41564, 19799, 294, 677, 1573, 1026, 2461, 84, 543, 38632, 476, 1402, 897, 2312, 785, 3045, 3334, 15273, 1026, 17172, 17656, 573, 11, 294, 47512, 2107, 4873, 19260, 10163, 23278, 2923, 3274, 13, 51064], "temperature": 0.0, "avg_logprob": -0.142628208694295, "compression_ratio": 1.6229508196721312, "no_speech_prob": 0.0684814453125, "words": null}, {"id": 87, "seek": 76700, "start": 752.0, "end": 767.0, "text": " In questo caso, un software va visto come un insieme di percorsi, ognuno dei quali \u00e8 frutto della combinazione di tutta una serie di valori, di eventi, di risorse, di interazione con gli utenti, eccetera.", "tokens": [51064, 682, 10263, 9666, 11, 517, 4722, 2773, 17558, 808, 517, 1028, 44940, 1026, 680, 66, 830, 72, 11, 277, 4568, 12638, 13874, 4101, 72, 4873, 431, 28698, 11618, 38514, 12928, 1026, 3672, 1328, 2002, 23030, 1026, 1323, 7386, 11, 1026, 2280, 72, 11, 1026, 2253, 18699, 11, 1026, 728, 12928, 416, 17161, 2839, 23012, 11, 29613, 20269, 13, 51814], "temperature": 0.0, "avg_logprob": -0.142628208694295, "compression_ratio": 1.6229508196721312, "no_speech_prob": 0.0684814453125, "words": null}, {"id": 88, "seek": 79300, "start": 767.0, "end": 777.0, "text": " In una visione del genere, gi\u00e0 un piccolo software si compone di tantissimi percorsi. Immaginiamo quindi cosa potrebbe accadere al crasher di tale software.", "tokens": [50364, 682, 2002, 5201, 68, 1103, 41553, 11, 30469, 517, 13363, 46086, 4722, 1511, 715, 546, 1026, 12095, 891, 10121, 680, 66, 830, 72, 13, 17322, 559, 259, 7415, 15727, 10163, 1847, 39487, 1317, 345, 323, 419, 941, 296, 511, 1026, 17172, 4722, 13, 50864], "temperature": 0.0, "avg_logprob": -0.1463815772481132, "compression_ratio": 1.5606694560669456, "no_speech_prob": 0.0026721954345703125, "words": null}, {"id": 89, "seek": 79300, "start": 777.0, "end": 793.0, "text": " Per avere un ordine di grandezza, dobbiamo pensare che, all'interno di un programma, ogni volta che aggiungiamo una semplice istruzione IF, stiamo in linea generale raddoppiando la quantit\u00e0 di percorsi disponibili.", "tokens": [50864, 3026, 37914, 517, 4792, 533, 1026, 2697, 4371, 2394, 11, 360, 6692, 7415, 6099, 543, 947, 11, 439, 6, 5106, 1771, 1026, 517, 1461, 1696, 11, 33189, 18765, 947, 42254, 1063, 7415, 2002, 4361, 564, 573, 1418, 894, 19706, 26080, 11, 342, 7415, 294, 1622, 64, 1337, 1220, 2843, 67, 17158, 72, 1806, 635, 4426, 12445, 1026, 680, 66, 830, 72, 23311, 897, 2312, 13, 51664], "temperature": 0.0, "avg_logprob": -0.1463815772481132, "compression_ratio": 1.5606694560669456, "no_speech_prob": 0.0026721954345703125, "words": null}, {"id": 90, "seek": 81400, "start": 793.0, "end": 799.0, "text": " Per non parlare, invece, se ad esempio inseriamo la possibilit\u00e0 di input da parte dell'utente.", "tokens": [50364, 3026, 2107, 13734, 543, 11, 36344, 11, 369, 614, 33627, 1028, 260, 7415, 635, 24145, 12445, 1026, 4846, 1120, 6975, 19781, 6, 325, 1576, 13, 50664], "temperature": 0.0, "avg_logprob": -0.1560661701595082, "compression_ratio": 1.5706521739130435, "no_speech_prob": 0.10223388671875, "words": null}, {"id": 91, "seek": 81400, "start": 799.0, "end": 814.0, "text": " In un contesto del genere, pensare di avere un approccio a forza bruta, quindi pensare di poter coprire qualsiasi possibile test per scovare qualsiasi possibile bug, semplicemente non ha senso.", "tokens": [50664, 682, 517, 10287, 78, 1103, 41553, 11, 6099, 543, 1026, 37914, 517, 2075, 66, 8529, 257, 337, 2394, 738, 12093, 11, 15727, 6099, 543, 1026, 1847, 260, 2971, 38920, 421, 1124, 4609, 72, 50184, 1500, 680, 795, 5179, 543, 421, 1124, 4609, 72, 50184, 7426, 11, 4361, 4770, 16288, 2107, 324, 3151, 539, 13, 51414], "temperature": 0.0, "avg_logprob": -0.1560661701595082, "compression_ratio": 1.5706521739130435, "no_speech_prob": 0.10223388671875, "words": null}, {"id": 92, "seek": 84400, "start": 814.0, "end": 823.0, "text": " Sarebbe necessario cos\u00ec tanto tempo da rendere impossibile la pubblicazione del software e quindi inutili gli stessi test.", "tokens": [50364, 318, 543, 39042, 2688, 4912, 23278, 10331, 8972, 1120, 6125, 323, 38802, 30898, 635, 1535, 11489, 12928, 1103, 4722, 308, 15727, 294, 325, 2312, 17161, 342, 442, 72, 1500, 13, 50814], "temperature": 0.0, "avg_logprob": -0.1576206188714295, "compression_ratio": 1.5546875, "no_speech_prob": 0.413818359375, "words": null}, {"id": 93, "seek": 84400, "start": 823.0, "end": 836.0, "text": " Quindi, nel mondo reale, l'approccio \u00e8 quello logico, cio\u00e8 si cerca di immaginare quali siano i potenziali problemi e di produrre la maggior quantit\u00e0 possibile di test inerenti ad essi,", "tokens": [50814, 32534, 11, 15373, 40499, 957, 68, 11, 287, 6, 1746, 24174, 8529, 4873, 22813, 3565, 2789, 11, 41827, 1511, 26770, 1026, 3397, 559, 259, 543, 4101, 72, 262, 6254, 741, 1847, 11368, 831, 72, 1154, 72, 308, 1026, 15792, 374, 265, 635, 44639, 1973, 4426, 12445, 50184, 1026, 1500, 294, 260, 23012, 614, 2097, 72, 11, 51464], "temperature": 0.0, "avg_logprob": -0.1576206188714295, "compression_ratio": 1.5546875, "no_speech_prob": 0.413818359375, "words": null}, {"id": 94, "seek": 84400, "start": 836.0, "end": 843.0, "text": " con la consapevolezza che esister\u00e0 sempre una certa probabilit\u00e0 che qualcosa sfuga.", "tokens": [51464, 416, 635, 1014, 41153, 3080, 20336, 2394, 947, 785, 1964, 1467, 9553, 2002, 44438, 31959, 12445, 947, 42400, 47095, 19364, 13, 51814], "temperature": 0.0, "avg_logprob": -0.1576206188714295, "compression_ratio": 1.5546875, "no_speech_prob": 0.413818359375, "words": null}, {"id": 95, "seek": 87300, "start": 844.0, "end": 863.0, "text": " E siamo giunti al termine dell'episodio di oggi.", "tokens": [50364, 462, 33459, 1735, 2760, 72, 419, 1433, 533, 19781, 6, 595, 271, 378, 1004, 1026, 34768, 13, 51314], "temperature": 0.0, "avg_logprob": -0.20877403846153847, "compression_ratio": 1.4315068493150684, "no_speech_prob": 0.051055908203125, "words": null}, {"id": 96, "seek": 87300, "start": 863.0, "end": 873.0, "text": " Spero che l'argomento sia stato interessante, voi come al solito fatemi sapere cosa ne pensate nei commenti su Twitter, su Telegram, su Instagram o dove volete.", "tokens": [51314, 318, 49565, 947, 287, 6, 289, 30851, 15467, 25176, 29657, 24372, 11, 20931, 808, 419, 1404, 3528, 4046, 13372, 18985, 323, 10163, 408, 6099, 473, 34517, 2871, 72, 459, 5794, 11, 459, 14889, 1342, 11, 459, 5281, 277, 23287, 1996, 3498, 13, 51814], "temperature": 0.0, "avg_logprob": -0.20877403846153847, "compression_ratio": 1.4315068493150684, "no_speech_prob": 0.051055908203125, "words": null}, {"id": 97, "seek": 90300, "start": 873.0, "end": 890.0, "text": " Condividete il pi\u00f9 possibile questo episodio sui vostri social per far crescere la community, unitevi al gruppo Telegram Pensieri in Codice e non dimenticate che un informatico risolve problemi, a volte anche usando il computer.", "tokens": [50364, 21793, 1843, 3498, 1930, 10589, 50184, 10263, 39200, 1004, 459, 72, 28944, 470, 2093, 680, 1400, 20964, 15312, 635, 1768, 11, 29320, 4917, 419, 47477, 78, 14889, 1342, 45035, 45980, 294, 383, 378, 573, 308, 2107, 274, 2328, 8700, 947, 517, 1356, 2399, 78, 2253, 37361, 1154, 72, 11, 257, 37801, 11585, 29798, 1930, 3820, 13, 51214], "temperature": 0.0, "avg_logprob": -0.1910752138849032, "compression_ratio": 1.3712574850299402, "no_speech_prob": 0.136474609375, "words": null}, {"id": 98, "seek": 90547, "start": 903.0, "end": 904.0, "text": " A presto!", "tokens": [50364, 316, 16305, 78, 0, 50414], "temperature": 0.0, "avg_logprob": -0.7187500170298985, "compression_ratio": 0.5294117647058824, "no_speech_prob": 0.9990234375, "words": null}], "language": "Italian"}